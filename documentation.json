{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-010a2ec57391a7ed9f729b0398a44f5a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<label>hello world</label>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentRate",
                    "defaultValue": "8",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <label>hello world</label>\n  `,\n  styles: []\n})\nexport class AppComponent {\n  currentRate = 8;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "bk/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ChatMessageComponent",
            "id": "component-ChatMessageComponent-661e275e066d61c582efae85a6a820e1",
            "file": "src/stories/chat-message-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-message",
            "styleUrls": [
                "./chat-message-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-message-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "duration",
                    "defaultValue": "\"00:00:00\"",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "inactivity",
                    "defaultValue": "false",
                    "line": 38,
                    "type": "boolean"
                },
                {
                    "name": "message",
                    "defaultValue": "\"\"",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "messageCount",
                    "defaultValue": "\"1\"",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "otherParty",
                    "defaultValue": "\"01483000007\"",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "priority",
                    "defaultValue": "\"P1\"",
                    "description": "<p>control inputs</p>\n",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "state",
                    "defaultValue": "'offered'",
                    "line": 35,
                    "type": "\"offered\" | \"accepted\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "channelIcon",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "statusMsg",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "itemInArray",
                    "args": [
                        {
                            "name": "arr",
                            "type": ""
                        },
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104
                },
                {
                    "name": "selectChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, OnChanges, EventEmitter, SimpleChanges  } from '@angular/core';\nimport { ButtonModule } from 'primeng/button/';\nimport { CardModule } from 'primeng/card';\nimport { MenuItem } from 'primeng/api';\n\n@Component({\n    selector: 'app-chat-message',\n    templateUrl: './chat-message-component.html',\n    styleUrls: ['./chat-message-component.scss']\n  })\n\nexport class ChatMessageComponent implements OnInit {\n    /**\n     * control inputs\n     */\n    @Input()\n    priority?: string = \"P1\";\n\n    @Input()\n    messageCount?: string = \"1\";\n\n    @Input()\n    otherParty?: string = \"01483000007\";\n\n    @Input()\n    active?: boolean = false;\n\n    @Input()\n    message?: string = \"\";\n\n    @Input()\n    duration?: string = \"00:00:00\";\n\n    @Input()\n    state : 'offered' | 'accepted' = 'offered';\n\n    @Input()\n    inactivity: boolean = false;\n\n    @Output()\n    onClick = new EventEmitter<any>();\n    onSelect = new EventEmitter<boolean>();\n\n    statusMsg: string = \"\";\n    selected: boolean = false;\n    channelIcon: string = \"\";\n\n    constructor() {\n    }\n\n    //\n    // function   : chat tile selection change\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //    \n    selectChange() {\n      this.selected = !this.selected;\n      this.onSelect.emit(this.selected);\n    }\n\n    //\n    // function   : monitor for property changes\n    //\n    // parameters : changes - property change object\n    //\n    // returns    : none.\n    //    \n    ngOnChanges (changes: SimpleChanges) {\n      for (const propName in changes) {\n        switch (propName) {\n          case \"selected\":\n            console.log(\"selected\");\n            break;\n\n          case \"channel\":\n            switch (changes[propName].currentValue) {\n              case \"facebook\":\n                this.channelIcon = \"icon-Facebook\";\n                break;\n              case \"livechat\":\n                this.channelIcon = \"icon-LiveChat\";                \n                break;\n              case \"twitter\":\n                this.channelIcon = \"icon-Twitter\";                \n                break;\n              case \"whatsapp\":\n                this.channelIcon = \"icon-Whatsapp\";                \n                break;\n            }\n            break;\n        }\n      }\n    }\n\n    //\n    // function   : component initialisation event handler\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //    \n    ngOnInit() {\n\n    }\n\n    //\n    // function   : is string contained in array\n    //\n    // parameters : arr  - arr to search\n    //              item - string item to search for\n    //\n    // returns    : none.\n    //\n    itemInArray(arr, item) {\n      var i;\n      for (i=0; i < arr.length; i++) {\n        if (item===arr[i]) {\n          return (true);\n        }\n      }\n      return (false);\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ui-interaction-tile-chat-inactivity {\r\n    height: 198px;\r\n    width: 500px;\r\n} \r\n\r\n.ui-interaction-tile-toolbar {\r\n    padding-left: 40px;\r\n}\r\n\r\n.pi {\r\n    font-size: 1.0em;\r\n}\r\n\r\n.ui-interaction-tile-inactivity-label {\r\n    height: 36px;\r\n    width: 195px;\r\n    font-size: 14px;\r\n    color: #56627C;\r\n}\r\n\r\n.ui-interaction-tile-duration {\r\n    font-size: 12px;\r\n    color:#56627C;\r\n    margin-right:16px;\r\n}\r\n\r\n.ui-interaction-tile-channel-container {\r\n    width: 35px;\r\n}\r\n\r\n.ui-interaction-tile-channel {\r\n    font-size: 20px;\r\n    color: #217EB7;\r\n}\r\n\r\n.ui-interaction-tile-party {\r\n    font-size: 14px;\r\n    color: #56627C;\r\n    font-weight: 600;\r\n    display: block;\r\n    width: 179px;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;      \r\n}\r\n\r\n.ui-button-interaction-tile {\r\n    font-size:0.8em;\r\n    width: 24px !important;\r\n    height: 24px !important;    \r\n}\r\n\r\n.ui-interaction-tile-flag {\r\n    width: 21px;\r\n    height: 17px;\r\n    border-radius: 2px;\r\n    font-size: 10px;\r\n    line-height: 17px; \r\n    color: #FFFFFF;  \r\n    text-align: center;\r\n    float: right;\r\n}\r\n\r\n.ui-interaction-tile-container-flag {\r\n    text-align:right; \r\n    width:33px;\r\n    height: 26px;\r\n    padding-top: 4px;    \r\n}\r\n\r\n.ui-interaction-tile-status {\r\n    font-size: 12px;\r\n    line-height: 16px;\r\n    color: #56627C;\r\n}\r\n\r\n.ui-interaction-tile-button-answer {\r\n    cursor:pointer;\r\n    height: 24px;\r\n    width: 24px; \r\n    line-height: 24px; \r\n    border-radius: 12px;\r\n    background-color: #3EC154; \r\n    color: #ffffff;\r\n}\r\n\r\n.ui-interaction-tile-message-count {\r\n    height: 16px;\r\n    width: 16px; \r\n    line-height: 16px; \r\n    border-radius: 8px;\r\n    background-color: #FA9397; \r\n    color: #ffffff;\r\n    font-size: 10px;\r\n    margin-right:8px;\r\n}\r\n\r\n.ui-interaction-tile-status-ringing {\r\n    color: #3EC154; \r\n}\r\n\r\n.ui-interaction-tile-onhold {\r\n    background: #E4AD00 !important;\r\n    color: #FFFFFF !important;\r\n}\r\n\r\n.ui-interaction-tile-muted {\r\n    background: #456FAA !important;\r\n    color: #FFFFFF !important;    \r\n}\r\n\r\n.ui-interaction-tile-toolbar-button {\r\n    background: #FFFFFF;\r\n    color: #949CAD;    \r\n    border: 1px solid #DBDBDB;\r\n    border-radius: 2px;\r\n    width:38px; \r\n    height: 26px;\r\n    text-align: center;  \r\n    cursor: pointer;  \r\n}\r\n\r\n.ui-interaction-tile-toolbar-button:hover {\r\n    border-color: #949CAD;\r\n}\r\n\r\n.ui-interaction-tile-toolbar-button>span {\r\n    line-height:24px; \r\n    font-size:12px;\r\n}\r\n\r\n.ui-interaction-tile-extend {\r\n    height: 118px;\r\n    margin-top: 6px;\r\n    background-color: #F6F6F6;\r\n    border-top: 1px solid #DBDBDB;\r\n}\r\n\r\n.ui-interaction-tile-extend-text {\r\n    height: 36px;\r\n    width: 195px;\r\n    margin-top: 16px;\r\n    font-family: IBM Plex Sans;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 14px;\r\n    line-height: 18px;\r\n    text-align: center;    \r\n}\r\n\r\n.ui-interaction-tile-extend-button {\r\n    background: #FCFCFC;\r\n    /* Elements/Primary blue */\r\n    border: 1px solid #03A9F4;\r\n    box-sizing: border-box;\r\n    border-radius: 2px;\r\n    width: 76px;\r\n    height: 26px;\r\n    margin-top: 16px;\r\n    text-align: center;\r\n    cursor: pointer;\r\n}\r\n\r\n.ui-interaction-tile-extend-button-text {\r\n    font-family: IBM Plex Sans;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 14px;\r\n    line-height: 24px;\r\n\r\n    color: #03A9F4;    \r\n}\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}\r\n\r\n.ui-interaction-tile-customer-id {\r\n    width: 40px;\r\n    height: 40px;\r\n    line-height: 40px;\r\n    background: #949CAD;\r\n    border-radius: 4px;\r\n    font-family: IBM Plex Sans;\r\n    font-style: normal;\r\n    font-weight: 600;\r\n    font-size: 24px;\r\n    text-align: center;\r\n    color: #FFFFFF;\r\n}\r\n\r\n.ui-interaction-tile-message-box-text {\r\n    font-size: 14px;\r\n    color: #56627C;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    display: -webkit-box;\r\n    -webkit-box-orient: vertical;    \r\n    background-color: #ffffff;\r\n    padding: 5px;\r\n    border-radius: 4px;    \r\n    min-height: 24px;\r\n}\r\n\r\n.ui-interaction-tile-message {\r\n    margin-top:6px;    \r\n    width: 400px;\r\n    padding-top: 8px;\r\n}\r\n\r\n.ui-interaction-tile-content {\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n}",
                    "styleUrl": "./chat-message-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 46
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"ui-interaction-tile-message\">\n  <div class=\"ui-interaction-tile-content\">\n\n    <div class=\"p-grid\">\n      <div class=\"p-col-fixed ui-border\" style=\"width:55px\">\n          <div class=\"ui-interaction-tile-customer-id\">L</div>\n      </div>\n      <div class=\"p-col ui-border \">\n          <span class=\"ui-border ui-interaction-tile-message-box-text\">\n              <span>{{message}}</span>\n          </span>\n      </div>\n      <!--div class=\"p-col-fixed ui-border\" style=\"width:55px\">\n        <div class=\"ui-interaction-tile-customer-id\">L</div>\n      </div-->      \n    </div>\n\n  </div>\n\n</div>\n"
        },
        {
            "name": "ChatTaskComponent",
            "id": "component-ChatTaskComponent-805db79555fa0a40857959b59b94d53d",
            "file": "src/stories/chat-task-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-task",
            "styleUrls": [
                "./chat-task-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-task-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "duration",
                    "defaultValue": "\"00:00:00\"",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "extend",
                    "defaultValue": "false",
                    "line": 42,
                    "type": "boolean"
                },
                {
                    "name": "extendTimeout",
                    "defaultValue": "15",
                    "line": 45,
                    "type": "number"
                },
                {
                    "name": "message",
                    "defaultValue": "\"\"",
                    "line": 33,
                    "type": "string"
                },
                {
                    "name": "messageCount",
                    "defaultValue": "\"1\"",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "otherParty",
                    "defaultValue": "\"01483000007\"",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "priority",
                    "defaultValue": "\"P1\"",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "priorityColour",
                    "defaultValue": "\"#E02020\"",
                    "description": "<p>control inputs</p>\n",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "state",
                    "defaultValue": "'offered'",
                    "line": 39,
                    "type": "\"offered\" | \"accepted\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "channelIcon",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "extendTimeLeft",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "extendTimeoutTimer",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "statusMsg",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "itemInArray",
                    "args": [
                        {
                            "name": "arr",
                            "type": ""
                        },
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 147,
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135
                },
                {
                    "name": "selectChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, OnChanges, EventEmitter, SimpleChanges, NgZone } from '@angular/core';\nimport { ButtonModule } from 'primeng/button/';\nimport { CardModule } from 'primeng/card';\nimport { MenuItem } from 'primeng/api';\nimport { interval, timer } from 'rxjs';\n\n@Component({\n    selector: 'app-chat-task',\n    templateUrl: './chat-task-component.html',\n    styleUrls: ['./chat-task-component.scss']\n  })\n\nexport class ChatTaskComponent implements OnInit {\n    /**\n     * control inputs\n     */\n    @Input() \n    priorityColour:string = \"#E02020\";\n\n    @Input()\n    priority?: string = \"P1\";\n\n    @Input()\n    messageCount?: string = \"1\";\n\n    @Input()\n    otherParty?: string = \"01483000007\";\n\n    @Input()\n    active?: boolean = false;\n\n    @Input()\n    message?: string = \"\";\n\n    @Input()\n    duration?: string = \"00:00:00\";\n\n    @Input()\n    state : 'offered' | 'accepted' = 'offered';\n\n    @Input()\n    extend: boolean = false;\n    \n    @Input()\n    extendTimeout: number = 15;\n\n    @Output()\n    onClick = new EventEmitter<any>();\n    onSelect = new EventEmitter<boolean>();\n\n    statusMsg: string = \"\";\n    selected: boolean = false;\n    channelIcon: string = \"\";\n    extendTimeoutTimer: any = null;\n    extendTimeLeft: number;\n\n    constructor(private ngZone: NgZone) {\n    }\n\n    //\n    // function   : chat tile selection change\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //    \n    selectChange() {\n      this.selected = !this.selected;\n      this.onSelect.emit(this.selected);\n    }\n\n    //\n    // function   : monitor for property changes\n    //\n    // parameters : changes - property change object\n    //\n    // returns    : none.\n    //    \n    ngOnChanges (changes: SimpleChanges) {\n      for (const propName in changes) {\n        switch (propName) {\n          case \"extendTimeout\":\n            this.extendTimeLeft = changes[propName].currentValue || 15;\n            break;\n\n          case \"extend\":\n            if (changes[propName].currentValue===true) {\n              //make sure time runs inside zone so angular \n              //angular change detection works and the UI is refreshed\n              this.ngZone.run(()=> {\n                this.extendTimeoutTimer = setInterval(() => {   \n                  this.extendTimeLeft = this.extendTimeLeft - 1;\n                  if (this.extendTimeLeft===0) {\n                    clearInterval(this.extendTimeoutTimer);\n                    this.extendTimeoutTimer = null;\n                  } \n                }, 1000);\n              })\n\n            } else {\n              if (this.extendTimeoutTimer) {\n                clearInterval(this.extendTimeoutTimer);\n                this.extendTimeLeft = this.extendTimeout;\n              }\n            }\n            break;\n\n          case \"channel\":\n            switch (changes[propName].currentValue) {\n              case \"facebook\":\n                this.channelIcon = \"icon-Facebook\";\n                break;\n              case \"livechat\":\n                this.channelIcon = \"icon-LiveChat\";                \n                break;\n              case \"twitter\":\n                this.channelIcon = \"icon-Twitter\";                \n                break;\n              case \"whatsapp\":\n                this.channelIcon = \"icon-Whatsapp\";                \n                break;\n            }\n            break;\n        }\n      }\n    }\n\n    //\n    // function   : component initialisation event handler\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //    \n    ngOnInit() {\n\n    }\n\n    //\n    // function   : is string contained in array\n    //\n    // parameters : arr  - arr to search\n    //              item - string item to search for\n    //\n    // returns    : none.\n    //\n    itemInArray(arr, item) {\n      var i;\n      for (i=0; i < arr.length; i++) {\n        if (item===arr[i]) {\n          return (true);\n        }\n      }\n      return (false);\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".chat-task-message {\r\n    margin-left: 34px;\r\n    margin-top:6px;\r\n    height: 32px;\r\n\r\n    &-text {\r\n        padding-right: 10px;        \r\n    }\r\n}\r\n\r\n.chat-task-class-name {\r\n    font-size: 12px;\r\n    color: #949CAD;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 2; /* number of lines to show */\r\n    -webkit-box-orient: vertical;    \r\n}\r\n\r\n.chat-task-duration {\r\n    font-size: 12px;\r\n    color:#56627C;\r\n    margin-right:16px;\r\n}\r\n\r\n.chat-task-channel {\r\n    width: 35px;\r\n\r\n    &-icon {\r\n        font-size: 24px;\r\n        color: #217EB7;\r\n    }\r\n}\r\n\r\n.chat-task-party {\r\n    font-size: 14px;\r\n    color: #56627C;\r\n    font-weight: 600;\r\n    display: block;\r\n    width: 179px;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;      \r\n}\r\n\r\n.chat-task-flag {\r\n    text-align:right; \r\n    width:33px;\r\n    height: 26px;\r\n    padding-top: 4px;  \r\n    \r\n    &-text {\r\n        width: 21px;\r\n        height: 17px;\r\n        border-radius: 2px;\r\n        font-size: 10px;\r\n        line-height: 17px; \r\n        color: #FFFFFF;  \r\n        text-align: center;\r\n        float: right;\r\n    }\r\n}\r\n\r\n.chat-task-status {\r\n    font-size: 12px;\r\n    line-height: 16px;\r\n    color: #56627C;\r\n}\r\n\r\n.chat-task-button-accept {\r\n    cursor:pointer;\r\n    height: 24px;\r\n    width: 24px; \r\n    line-height: 24px; \r\n    border-radius: 12px;\r\n    background-color: #3EC154; \r\n    color: #ffffff;\r\n}\r\n\r\n.chat-task-message-count {\r\n    height: 16px;\r\n    width: 16px; \r\n    line-height: 16px; \r\n    border-radius: 8px;\r\n    background-color: #FA9397; \r\n    color: #ffffff;\r\n    font-size: 10px;\r\n    margin-right:8px;\r\n}\r\n\r\n.chat-task-extend {\r\n    height: 118px;\r\n    margin-top: 6px;\r\n    background-color: #F6F6F6;\r\n    border-top: 1px solid #DBDBDB;\r\n    font-family: IBM Plex Sans;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n\r\n    &-text {\r\n        height: 36px;\r\n        width: 195px;\r\n        margin-top: 16px;\r\n        font-size: 14px;\r\n        line-height: 18px;\r\n        text-align: center;    \r\n        color: #56627C;        \r\n    }\r\n\r\n    &-button {\r\n        background: #FCFCFC;\r\n        border: 1px solid #03A9F4;\r\n        box-sizing: border-box;\r\n        border-radius: 2px;\r\n        width: 76px;\r\n        height: 26px;\r\n        margin-top: 16px;\r\n        text-align: center;\r\n        cursor: pointer;\r\n    }\r\n\r\n    &-button-text {\r\n        font-size: 14px;\r\n        line-height: 24px;\r\n        color: #03A9F4;    \r\n    }\r\n\r\n    &-tile {\r\n        height: 198px;\r\n    }\r\n}\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}",
                    "styleUrl": "./chat-task-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngZone",
                        "type": "NgZone"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"my-task\" [ngClass]=\"{ 'my-task-active' : active, 'chat-task-extend-tile' : extend }\">\n  <div class=\"chat-task-content my-task-chat\">\n\n      <div class=\"p-d-flex p-jc-between\">\n          <div class=\"p-d-flex\">\n             <div class=\"p-as-center ui-border chat-task-channel\">\n                 <input type=\"checkbox\" (change)=\"selectChange();\" >\n             </div>\n\n              <div class=\"p-as-center ui-border chat-task-channel\">\n                  <span class=\"chat-task-channel-icon\"><div [ngClass]=\"channelIcon\"></div></span>\n              </div>\n              <div class=\"p-as-center ui-border\">\n                  <span class=\"chat-task-party\">{{otherParty}}</span> \n              </div>\n          </div>\n          <div class=\"p-d-flex\">\n\n              <div [hidden]=\"state!=='offered'\" class=\"p-as-center ui-border\" style=\"text-align: center;\" >\n                  <div (click)=\"onClick.emit({ 'id': 'toolAnswer'})\" class=\"chat-task-button-accept icon-Tick\"></div>                    \n              </div>\n              <div class=\"p-as-center ui-border chat-task-flag\">\n                  <div [hidden]=\"priority===''\" class=\"chat-task-flag-text\" [ngStyle]=\"{'background-color' : priorityColour }\">{{priority}}</div>\n              </div> \n          </div>\n  \n      </div>  \n\n      <div class=\"p-d-flex p-jc-between chat-task-message ui-border\">\n          \n          <div class=\"p-d-flex chat-task-message-text\">\n              <div class=\"p-as-center ui-border\">\n                  <span class=\"chat-task-class-name\">\n                      <span>{{message}}</span>\n                  </span>\n              </div>\n          </div>\n\n          <div class=\"p-d-flex\">\n              <div [hidden]=\"messageCount===''\" class=\"p-as-center ui-border\" style=\"text-align: center;\" >\n                  <div class=\"chat-task-message-count\">{{messageCount}}</div>                    \n              </div>\n\n              <div [hidden]=\"duration===''\" class=\"p-as-center ui-border\" style=\"text-align: right;\">\n                  <span class=\"chat-task-duration\">{{duration}}</span>\n              </div>\n          </div>\n      </div> \n\n  </div>\n\n  <div *ngIf=\"extend\" class=\"chat-task-extend ui-border\">\n    <div class=\"p-d-flex p-jc-center\">\n        <div class=\"ui-border chat-task-extend-text\" >\n            <div style=\"text-align: center;\">This chat will be automatically put on hold in {{extendTimeLeft}} sec</div>\n        </div>\n    </div>\n    <div class=\"p-d-flex p-jc-center\">\n        <div (click)=\"onClick.emit({ 'id': 'toolExtendChat'})\" class=\"ui-border chat-task-extend-button\" >\n            <span class=\"ui-border chat-task-extend-button-text\">Extend</span>\n        </div>      \n    </div> \n  </div>\n\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "bk/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "bk/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "TelephonyTaskComponent",
            "id": "component-TelephonyTaskComponent-25d30d2853734b472ce76b6e47da5b12",
            "file": "src/stories/telephony-task-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-telephony-task",
            "styleUrls": [
                "./telephony-task-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./telephony-task-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "direction",
                    "defaultValue": "'inbound'",
                    "line": 43,
                    "type": "\"inbound\" | \"outbound\""
                },
                {
                    "name": "duration",
                    "defaultValue": "\"00:00:00\"",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "info",
                    "defaultValue": "\"\"",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "muted",
                    "defaultValue": "false",
                    "line": 41,
                    "type": "boolean"
                },
                {
                    "name": "onHold",
                    "defaultValue": "false",
                    "line": 38,
                    "type": "boolean"
                },
                {
                    "name": "otherParty",
                    "defaultValue": "\"01483000007\"",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "priority",
                    "defaultValue": "\"P1\"",
                    "description": "<p>control inputs</p>\n",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "priorityColour",
                    "defaultValue": "\"#E02020\"",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "state",
                    "defaultValue": "'none'",
                    "line": 35,
                    "type": "\"none\" | \"dialling\" | \"ringing\" | \"connected\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "busy",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "holdTooltip",
                    "defaultValue": "\"Hold\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "items",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "menuAutoHideTimer",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "mouseHover",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "muteTooltip",
                    "defaultValue": "\"Mute\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "statusMsg",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "itemInArray",
                    "args": [
                        {
                            "name": "arr",
                            "type": ""
                        },
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 206,
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mouseOut",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167
                },
                {
                    "name": "showMenu",
                    "args": [
                        {
                            "name": "menu",
                            "type": ""
                        },
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startDelayClose",
                    "args": [
                        {
                            "name": "menu",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopDelayClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190
                },
                {
                    "name": "updateStatus",
                    "args": [
                        {
                            "name": "direction",
                            "type": ""
                        },
                        {
                            "name": "state",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "jsdoctags": [
                        {
                            "name": "direction",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, OnChanges, EventEmitter, SimpleChanges  } from '@angular/core';\r\nimport { ButtonModule } from 'primeng/button/';\r\nimport { CardModule } from 'primeng/card';\r\nimport { MenuItem } from 'primeng/api';\r\n\r\n@Component({\r\n    selector: 'app-telephony-task',\r\n    templateUrl: './telephony-task-component.html',\r\n    styleUrls: ['./telephony-task-component.scss']\r\n  })\r\n\r\nexport class TelephonyTaskComponent implements OnInit {\r\n    /**\r\n     * control inputs\r\n     */\r\n    @Input()\r\n    priority?: string = \"P1\";\r\n\r\n    @Input() \r\n    priorityColour:string = \"#E02020\";\r\n\r\n    @Input()\r\n    otherParty?: string = \"01483000007\";\r\n\r\n    @Input()\r\n    active?: boolean = false;\r\n\r\n    @Input()\r\n    info?: string = \"\";\r\n\r\n    @Input()\r\n    duration?: string = \"00:00:00\";\r\n\r\n    @Input()\r\n    state : 'none' | 'dialling' | 'ringing' | 'connected' = 'none';\r\n\r\n    @Input()\r\n    onHold? : boolean = false;\r\n\r\n    @Input()\r\n    muted? : boolean = false;\r\n\r\n    @Input() direction: 'inbound' | 'outbound' = 'inbound';\r\n\r\n    @Output()\r\n    onClick = new EventEmitter<any>();\r\n\r\n    muteTooltip: string = \"Mute\";\r\n    holdTooltip: string = \"Hold\";\r\n    statusMsg: string = \"\";\r\n\r\n    mouseHover:boolean = false;\r\n    busy:boolean = true;\r\n    menuAutoHideTimer:any = null;\r\n\r\n    items: MenuItem[];\r\n\r\n    constructor() {\r\n      //pop-up menu items\r\n      this.items = [\r\n          {\r\n            id: 'toolRequeue', \r\n            label: 'Re-queue', \r\n            icon: 'icon-Requeue', \r\n            disabled : true,\r\n            command: (event) => {\r\n              this.onClick.emit({ 'id': event.item.id})\r\n            }\r\n          },\r\n          {\r\n            id: 'toolConference', \r\n            label: 'Conference', \r\n            icon: 'icon-conference', \r\n            disabled : true,\r\n            command: (event) => {\r\n              this.onClick.emit({ 'id': event.item.id})\r\n            }\r\n          },\r\n          {\r\n            id: 'toolInfo', \r\n            label: 'Call Info', \r\n            icon: 'icon-info', \r\n            disabled : true,\r\n            command: (event) => {\r\n              this.onClick.emit({ 'id': event.item.id})\r\n            }\r\n          },\r\n          {\r\n            id: 'toolDropcall', \r\n            label: 'Hang up', \r\n            icon: 'icon-hangup', \r\n            disabled : true,\r\n            command: (event) => {\r\n              this.onClick.emit({ 'id': event.item.id})\r\n            }\r\n          }, \r\n      ];\r\n    }\r\n\r\n    updateStatus(direction, state) {\r\n      //only applicable for outbound\r\n      switch (direction) {\r\n        case \"inbound\":\r\n          this.statusMsg = \"\";\r\n        break;\r\n\r\n        case \"outbound\":\r\n          switch (state) {\r\n            case \"dialling\":\r\n              this.statusMsg = \"Dialling...\";              \r\n              break;\r\n\r\n            case \"ringing\":\r\n              this.statusMsg = \"Ringing...\";                \r\n              break;\r\n\r\n            case \"connected\":\r\n              this.statusMsg = \"\";\r\n              break;\r\n\r\n            default:\r\n              this.statusMsg = \"\";\r\n              break;\r\n          }          \r\n          break;\r\n      }\r\n    }\r\n\r\n    ngOnChanges (changes: SimpleChanges) {\r\n      for (const propName in changes) {\r\n        switch (propName) {\r\n\r\n          case \"direction\":\r\n            this.updateStatus(changes[propName].currentValue, this.state);\r\n            break;\r\n\r\n          case \"state\":\r\n            this.updateStatus(this.direction, changes[propName].currentValue);\r\n            break;\r\n\r\n          case \"onHold\":\r\n            this.mouseHover = this.muted || changes[propName].currentValue;  \r\n            this.holdTooltip = this.onHold ? \"Resume\" : \"Hold\";\r\n            break;\r\n\r\n          case \"muted\":            \r\n            this.mouseHover = this.onHold || changes[propName].currentValue;\r\n            //refresh tooltips\r\n            this.muteTooltip = changes[propName].currentValue ? \"Unmute\" : \"Mute\";\r\n            break;\r\n\r\n          case \"toolbar\":\r\n            for (const itemId in changes[propName].currentValue) {\r\n              for (let index=0; index < this.items.length; index++) {\r\n                if (this.items[index].id===itemId) {\r\n                  this.items[index].disabled = changes[propName].currentValue[itemId].disabled;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            break;\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    //\r\n    // function   : show telephony quick menu\r\n    //\r\n    // parameters : menu  - reference to pop quick menu\r\n    //              event - DOM event\r\n    //\r\n    // returns    : none.\r\n    //\r\n    showMenu(menu, event) {\r\n      menu.show(event);\r\n    }\r\n\r\n    startDelayClose(menu) {\r\n      this.menuAutoHideTimer = setTimeout(()=> {\r\n        menu.hide();  \r\n        this.menuAutoHideTimer = null;\r\n      },100);\r\n    }\r\n  \r\n    stopDelayClose() {\r\n      //stop delay close timer if active\r\n      if (this.menuAutoHideTimer) {\r\n        clearTimeout(this.menuAutoHideTimer);\r\n        this.menuAutoHideTimer = null;      \r\n      }\r\n    }\r\n\r\n    //\r\n    // function   : is string contained in array\r\n    //\r\n    // parameters : arr  - arr to search\r\n    //              item - string item to search for\r\n    //\r\n    // returns    : none.\r\n    //\r\n    itemInArray(arr, item) {\r\n      var i;\r\n      for (i=0; i < arr.length; i++) {\r\n        if (item===arr[i]) {\r\n          return (true);\r\n        }\r\n      }\r\n      return (false);\r\n    }\r\n\r\n    //\r\n    // function   : mouse out event handler. Need to distinquish between\r\n    //              the mouse moving outside the component or hovering over\r\n    //              a child component\r\n    //\r\n    // parameters : event - DOM event\r\n    //\r\n    // returns    : none.\r\n    //\r\n    mouseOut (event) {\r\n      //this is the original element the event handler was assigned to\r\n      var ignore = false, e = event.toElement || event.relatedTarget;\r\n\r\n      //toolbar must remain visible if the call is held\r\n      if (this.onHold || this.muted) {\r\n        return;\r\n      }\r\n\r\n      //have we move to the task-item\r\n      if (e!=null && this.itemInArray(e.classList, \"ui-interaction-tile-content\")) {\r\n        return;\r\n      }\r\n      //traverse up the parents to determine if this is a child of the tile\r\n      //or the tile itself, only interested in tile itself for mouseout event\r\n      while (e!==null && e.parentNode.className && e.parentNode.className.indexOf(\"my-task\")===-1) {\r\n        if (this.itemInArray(e.parentNode.classList, \"ui-interaction-tile-content\")) {\r\n          ignore=true;\r\n          break;\r\n        }\r\n        e= e.parentNode;\r\n      }\r\n      if (!ignore) {\r\n        this.mouseHover=false;      \r\n      }\r\n  }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".telephony-task-info {\r\n    margin-top:6px;\r\n    height: 32px;\r\n}\r\n\r\n.telephony-task-class-name {\r\n    font-size: 12px;\r\n    color: #949CAD;\r\n    width: 207px;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;    \r\n}\r\n\r\n.telephony-task-duration {\r\n    font-size: 12px;\r\n    color:#56627C;\r\n    margin-right:16px;\r\n}\r\n\r\n.telephony-task-channel {\r\n    width: 42px;\r\n\r\n    &-icon {\r\n        font-size: 24px;\r\n        color: #217EB7;\r\n    }\r\n}\r\n\r\n.telephony-task-party {\r\n    font-size: 14px;\r\n    color: #56627C;\r\n    font-weight: 600;\r\n    display: block;\r\n    width: 166px;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;      \r\n}\r\n\r\n.telephony-task-flag {\r\n    text-align:right; \r\n    width:33px;\r\n    height: 26px;\r\n    padding-top: 4px;       \r\n\r\n    &-text {\r\n        width: 21px;\r\n        height: 17px;\r\n        border-radius: 2px;\r\n        font-size: 10px;\r\n        line-height: 17px; \r\n        color: #FFFFFF;  \r\n        text-align: center;\r\n        float: right;\r\n    }\r\n}\r\n\r\n.telephony-task-status {\r\n    font-size: 12px;\r\n    line-height: 16px;\r\n    color: #56627C;\r\n}\r\n\r\n.telephony-task-button-round {\r\n    cursor:pointer;\r\n    height: 24px;\r\n    width: 24px; \r\n    line-height: 24px; \r\n    border-radius: 12px;\r\n}\r\n\r\n.telephony-task-button-success {\r\n    background-color: #3EC154; \r\n    color: #ffffff;\r\n}\r\n\r\n.telephony-task-status-ringing {\r\n    color: #3EC154; \r\n}\r\n\r\n.telephony-task-onhold {\r\n    background: #E4AD00 !important;\r\n    color: #FFFFFF !important;\r\n}\r\n\r\n.telephony-task-muted {\r\n    background: #456FAA !important;\r\n    color: #FFFFFF !important;    \r\n}\r\n\r\n.telephony-task-toolbar {\r\n    padding-left: 40px;\r\n\r\n    &-button {\r\n        background: #FFFFFF;\r\n        color: #949CAD;    \r\n        border: 1px solid #DBDBDB;\r\n        border-radius: 2px;\r\n        width:38px; \r\n        height: 26px;\r\n        text-align: center;  \r\n        cursor: pointer;  \r\n\r\n        &:hover {\r\n            border-color: #949CAD;\r\n        }\r\n\r\n        >span {\r\n            line-height:24px; \r\n            font-size:12px;\r\n        }\r\n    }\r\n}\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}\r\n\r\n\r\n",
                    "styleUrl": "./telephony-task-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 56
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"my-task my-task-telephony\" [ngClass]=\"{ 'my-task-active' : active }\">\r\n    <div class=\"telephony-task-content\" (mouseover)=\"mouseHover=busy\" (mouseout)=\"mouseOut($event);\">\r\n\r\n        <div class=\"p-d-flex p-jc-between\">\r\n            <div class=\"p-d-flex\">\r\n                <div class=\"p-as-center ui-border telephony-task-channel\">\r\n                    <span class=\"telephony-task-channel-icon\"><div [ngClass]=\"{ 'icon-Incoming' : direction==='inbound', 'icon-Outgoing' : direction!=='inbound' }\"></div></span>\r\n                </div>\r\n                <div class=\"p-as-center ui-border\">\r\n                    <span class=\"telephony-task-party\">{{otherParty}}</span> \r\n                </div>\r\n            </div>\r\n            <div class=\"p-d-flex\">\r\n                <div class=\"p-as-center ui-border\" style=\"text-align: right;\">\r\n                    <span [ngClass]=\"{ 'telephony-task-status-ringing' : (state==='ringing' && direction==='outbound') }\" class=\"telephony-task-status\"><i [hidden]=\"!(state==='ringing' && direction==='outbound')\" class=\"icon-Ringing\"></i> {{statusMsg}}</span>\r\n                </div>\r\n\r\n                <div [hidden]=\"!(direction==='inbound' && state==='ringing')\" class=\"p-as-center ui-border\" style=\"text-align: center;\" >\r\n                    <div (click)=\"onClick.emit({ 'id': 'toolAnswer'})\" class=\"telephony-task-button-round telephony-task-button-success icon-Tick\"></div>                    \r\n                </div>\r\n                <div class=\"p-as-center ui-border telephony-task-flag\">\r\n                    <div [hidden]=\"priority===''\" class=\"telephony-task-flag-text\" [ngStyle]=\"{'background-color' : priorityColour }\">{{priority}}</div>\r\n                </div> \r\n            </div>\r\n    \r\n        </div>  \r\n\r\n        <div class=\"p-d-flex p-jc-between telephony-task-info ui-border\">\r\n            \r\n            <div class=\"p-d-flex\">\r\n                <div class=\"p-as-center ui-border\">\r\n                    <span class=\"telephony-task-class-name\" [ngStyle]=\"{'display' : mouseHover ? 'none' : 'block'}\">\r\n                        <span title=\"{{info}}\">{{info}}</span>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-as-center ui-border\">\r\n                        <div [hidden]=\"!mouseHover\"> \r\n                            <div class=\"telephony-task-toolbar p-d-flex\">\r\n                                <p-menu (mouseleave)=\"menu.hide($event);\" (mouseenter)=\"stopDelayClose();\" #menu [popup]=\"true\" [model]=\"items\"></p-menu>\r\n                                \r\n                                <div pTooltip=\"{{muteTooltip}}\" tooltipPosition=\"top\" (click)=\"onClick.emit({ 'id': 'toolMuted'})\" class=\"p-as-center ui-border telephony-task-toolbar-button\" [ngClass]=\"{'telephony-task-muted' : muted }\" >\r\n                                    <span [ngClass]=\"muted ? 'icon-Social-mentions' : 'icon-Mute'\"></span>\r\n                                </div>\r\n                \r\n                                <div pTooltip=\"{{holdTooltip}}\" tooltipPosition=\"top\" (click)=\"onClick.emit({ 'id': 'toolHold'})\" class=\"p-as-center ui-border telephony-task-toolbar-button\" [ngClass]=\"{'telephony-task-onhold' : onHold }\" >\r\n                                    <span [ngClass]=\"onHold ? 'icon-Play' : 'icon-Hold'\"></span>\r\n                                </div>\r\n                                <div (mouseenter)=\"showMenu(menu, $event)\" (mouseleave)=\"startDelayClose(menu);\" class=\"p-as-center ui-border telephony-task-toolbar-button\">\r\n                                    <span class=\"icon-More\"></span>\r\n                                </div> \r\n                            </div>\r\n                        </div>  \r\n                </div>     \r\n            </div>\r\n\r\n            <div class=\"p-d-flex\">\r\n                <div class=\"p-as-center ui-border\" style=\"text-align: right;\">\r\n                    <span class=\"telephony-task-duration\">{{duration}}</span>\r\n                </div>\r\n            </div>\r\n\r\n        </div> \r\n    </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Chat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-task.stories.ts",
                "type": "",
                "defaultValue": "(args) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n    ],\n  },\n  component: ChatTaskComponent,\n  props: args,\n})"
            },
            {
                "name": "ChatMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "",
                "defaultValue": "(args) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n    ],\n  },\n  component: ChatMessageComponent,\n  props: args,\n})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "bk/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "bk/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "bk/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "bk/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "bk/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "bk/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "bk/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "bk/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Telephony",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telephony-task.stories.ts",
                "type": "",
                "defaultValue": "(args) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n    ],\n  },\n  component: TelephonyTaskComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "bk/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "bk/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "bk/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/chat-task.stories.ts": [
                {
                    "name": "Chat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-task.stories.ts",
                    "type": "",
                    "defaultValue": "(args) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n    ],\n  },\n  component: ChatTaskComponent,\n  props: args,\n})"
                }
            ],
            "src/stories/chat-message.stories.ts": [
                {
                    "name": "ChatMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "",
                    "defaultValue": "(args) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n    ],\n  },\n  component: ChatMessageComponent,\n  props: args,\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "bk/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "bk/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "bk/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "bk/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "bk/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "bk/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "bk/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "bk/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "bk/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "bk/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "bk/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "bk/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "bk/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "bk/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/stories/telephony-task.stories.ts": [
                {
                    "name": "Telephony",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telephony-task.stories.ts",
                    "type": "",
                    "defaultValue": "(args) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n    ],\n  },\n  component: TelephonyTaskComponent,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "bk/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "bk/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "bk/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "bk/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "bk/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "bk/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "bk/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "bk/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "bk/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "bk/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "bk/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "bk/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "bk/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "bk/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatMessageComponent",
                "coveragePercent": 5,
                "coverageCount": "1/19",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ChatMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-task-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatTaskComponent",
                "coveragePercent": 4,
                "coverageCount": "1/23",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Chat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telephony-task-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TelephonyTaskComponent",
                "coveragePercent": 3,
                "coverageCount": "1/28",
                "status": "low"
            },
            {
                "filePath": "src/stories/telephony-task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Telephony",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}