{
    "pipes": [],
    "interfaces": [
        {
            "name": "ChatMessageAttachment",
            "id": "interface-ChatMessageAttachment-c56bed5e3a0ae40746e357e4f83c6f2d",
            "file": "src/stories/chat-message-attachment.ts",
            "type": "interface",
            "sourceCode": "export interface ChatMessageAttachment {\r\n    \"url\": string,\r\n    \"size\": string, \r\n    \"mimeType\": string\r\n}",
            "properties": [
                {
                    "name": "mimeType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "size",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AttachmentDirective",
            "id": "directive-AttachmentDirective-3fc48cf178328c3b093b1fa275b4571c",
            "file": "src/stories/chat-message-attachment-directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[attachmentHost]',\r\n})\r\nexport class AttachmentDirective {\r\n  constructor(public viewContainerRef: ViewContainerRef) { }\r\n}\r\n",
            "selector": "[attachmentHost]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SliderItemDirective",
            "id": "directive-SliderItemDirective-9019345351a9ac771bd6791dd4e61260",
            "file": "backup/slider-item-directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appSliderItem]'\r\n})\r\nexport class SliderItemDirective {\r\n\r\n  constructor() { }\r\n\r\n}",
            "selector": "[appSliderItem]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-010a2ec57391a7ed9f729b0398a44f5a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<label>hello world</label>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentRate",
                    "defaultValue": "8",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <label>hello world</label>\n  `,\n  styles: []\n})\nexport class AppComponent {\n  currentRate = 8;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ChatMessageAttachmentImageComponent",
            "id": "component-ChatMessageAttachmentImageComponent-ed6c08aad18951599b15bed10b0b5333",
            "file": "src/stories/chat-message-attachment-image-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-message-attachment-image",
            "styleUrls": [
                "./chat-message-attachment-image-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-message-attachment-image-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "attachment",
                    "line": 19,
                    "type": "ChatMessageAttachment"
                },
                {
                    "name": "showBorder",
                    "defaultValue": "false",
                    "line": 22,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "attachmentName",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "attachmentType",
                    "defaultValue": "\"image\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "imageName",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'imageName'"
                        }
                    ]
                },
                {
                    "name": "imageNameTooltip",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "getAttachmentName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Input, ViewChild, ElementRef, Component, OnInit, AfterViewInit } from '@angular/core';\r\nimport { ChatMessageAttachment } from './chat-message-attachment';\r\n\r\n@Component({\r\n    selector: 'app-chat-message-attachment-image',\r\n    templateUrl: './chat-message-attachment-image-component.html',\r\n    styleUrls: ['./chat-message-attachment-image-component.scss']\r\n  })\r\n\r\nexport class ChatMessageAttachmentImageComponent implements OnInit, AfterViewInit {\r\n    \r\n    readonly attachmentType:string = \"image\";\r\n\r\n    attachmentName: string = \"\";\r\n    imageNameTooltip:string = \"\";\r\n    @ViewChild('imageName') imageName: ElementRef;\r\n\r\n    @Input()\r\n    attachment: ChatMessageAttachment;\r\n\r\n    @Input() \r\n    showBorder: boolean = false;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    //\r\n    // function   : component initialisation event handler\r\n    //\r\n    // parameters : none.\r\n    //\r\n    // returns    : none.\r\n    //    \r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n      let imageNameElement: HTMLDivElement = this.imageName.nativeElement;\r\n      if (imageNameElement.scrollWidth > imageNameElement.clientWidth) {\r\n        this.imageNameTooltip = this.getAttachmentName();\r\n      }\r\n    }\r\n\r\n    getAttachmentName() {\r\n      if (!this.attachmentName) {\r\n        let parts:string[] = this.attachment.url.split('/');\r\n        this.attachmentName = parts[parts.length-1];\r\n      }\r\n      return (this.attachmentName);\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './assets/mytheme/variables';\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}\r\n\r\n.chat-message {\r\n    margin-top:6px;    \r\n    width: 400px;\r\n    padding-top: 8px;\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n\r\n    &-attachment {\r\n        \r\n        &-border {\r\n            padding-top: 8px;\r\n            margin-left: 12px;\r\n            margin-bottom: 8px;                \r\n            border: 1px solid #DBDBDB;\r\n            border-radius: 2px;   \r\n            width: calc(#{$chatMessageAttachmentImageSize} + (2 * #{$margin}) + 2px);\r\n        }        \r\n        \r\n        &-image {\r\n            border-radius: 2px; \r\n            width: $chatMessageAttachmentImageSize; \r\n            height: $chatMessageAttachmentImageSize;         \r\n            margin-left:12px;\r\n            margin-right: 12px;\r\n            background-size: cover; \r\n            background-repeat: no-repeat; \r\n            background-position: 50% 50%;\r\n\r\n            &-link {\r\n                width: calc(#{$chatMessageAttachmentImageSize} + 25px);\r\n                padding-left: 12px;\r\n                padding-top: 8px;\r\n                padding-bottom: 8px;\r\n                padding-right: 12px;\r\n\r\n                &:hover {\r\n                    cursor: pointer;\r\n                }              \r\n\r\n                &:hover &-download {\r\n                    display: block;\r\n                }              \r\n\r\n                &-name {\r\n                    font-family: IBM Plex Sans;\r\n                    font-style: normal;\r\n                    font-weight: normal;\r\n                    font-size: 14px;\r\n                    line-height: 18px;\r\n                    overflow: hidden;\r\n                    white-space: nowrap;\r\n                    text-overflow: ellipsis; \r\n                    \r\n                    width: calc(#{$chatMessageAttachmentImageSize} - 30px);\r\n\r\n                    color: $chatMessageAttachmentLinkTextColor;\r\n\r\n                    &:hover {\r\n                        text-decoration-line: underline;\r\n                    }\r\n                }\r\n        \r\n                &-download {\r\n                    font-size: 1.0em;\r\n                    display: none;\r\n                }            \r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./chat-message-attachment-image-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"p-col p-col-nogutter ui-border\" [ngClass]=\"{'chat-message-attachment-border': showBorder}\" >\r\n\r\n    <div class=\"p-grid p-nogutter p-flex-column\">\r\n    \r\n        <div class=\"p-col p-col-nogutter ui-border\">\r\n            <div [ngStyle]=\"{'background-image': 'url(' + attachment.url +')'}\" class=\"chat-message-attachment-image\"></div>\r\n        </div>\r\n\r\n        <div class=\"p-d-flex p-jc-between chat-message-attachment-image-link\">\r\n            <div class=\"p-as-center ui-border\">\r\n                <div #imageName tooltipStyleClass=\"ui-tooltip-flex\" class=\"chat-message-attachment-image-link-name\" pTooltip=\"{{imageNameTooltip}}\" tooltipPosition=\"bottom\">{{getAttachmentName()}}</div>\r\n            </div>\r\n            <div class=\"p-as-center ui-border\">\r\n                <a class=\"chat-message-attachment-image-link-download pi pi-download\" pTooltip=\"Download\" tooltipPosition=\"bottom\" href=\"{{attachment.url}}\" target=\"_blank\" download=\"{{attachment.url}}\"></a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ChatMessageAttachmentMultiImageComponent",
            "id": "component-ChatMessageAttachmentMultiImageComponent-dc52887636e38330ee7657ac882ff599",
            "file": "src/stories/chat-message-attachment-multi-image-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-message-attachment-multi-image",
            "styleUrls": [
                "./chat-message-attachment-multi-image-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-message-attachment-multi-image-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "images",
                    "line": 18,
                    "type": "ChatMessageAttachment[]"
                },
                {
                    "name": "showBorder",
                    "defaultValue": "false",
                    "line": 21,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "showImageViewer",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "attachmentType",
                    "defaultValue": "\"multi-image\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "imageCountTooltip",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "imageName",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'imageName'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { EventEmitter, Input, ViewChild, ElementRef, Component, OnInit, AfterViewInit, Output } from '@angular/core';\r\nimport { ChatMessageAttachment } from './chat-message-attachment';\r\n\r\n@Component({\r\n    selector: 'app-chat-message-attachment-multi-image',\r\n    templateUrl: './chat-message-attachment-multi-image-component.html',\r\n    styleUrls: ['./chat-message-attachment-multi-image-component.scss']\r\n  })\r\n\r\nexport class ChatMessageAttachmentMultiImageComponent implements OnInit, AfterViewInit {\r\n    \r\n  readonly attachmentType:string = \"multi-image\";\r\n\r\n    imageCountTooltip:string = \"\";\r\n    @ViewChild('imageName') imageName: ElementRef;\r\n\r\n    @Input()\r\n    images: ChatMessageAttachment[];\r\n\r\n    @Input() \r\n    showBorder: boolean = false;\r\n\r\n    @Output()\r\n    showImageViewer = new EventEmitter<any>();\r\n\r\n    constructor() {\r\n    }\r\n\r\n    //\r\n    // function   : component initialisation event handler\r\n    //\r\n    // parameters : none.\r\n    //\r\n    // returns    : none.\r\n    //    \r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n      let imageNameElement: HTMLDivElement = this.imageName.nativeElement;\r\n      if (imageNameElement.scrollWidth > imageNameElement.clientWidth) {\r\n        this.imageCountTooltip = this.images.length + \" images\";\r\n      }\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './assets/mytheme/variables';\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}\r\n\r\n.chat-message {\r\n    margin-top:6px;    \r\n    width: 400px;\r\n    padding-top: 8px;\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n\r\n    &-attachment {\r\n    \r\n        &-border {\r\n            padding-top: 8px;\r\n            margin-left: 12px;\r\n            margin-bottom: 8px;                \r\n            border: 1px solid #DBDBDB;\r\n            border-radius: 2px;   \r\n            width: calc(#{$chatMessageAttachmentImageSize} + (2 * #{$margin}) + 2px);\r\n        }  \r\n                \r\n        &-image {\r\n            border-radius: 2px; \r\n            width: $chatMessageAttachmentImageSize;\r\n            height: $chatMessageAttachmentImageSize;        \r\n            margin-left:12px;\r\n            margin-right: 12px;\r\n\r\n            &-sub {\r\n                width: calc(#{$chatMessageAttachmentImageSize} / 2);\r\n                height: calc(#{$chatMessageAttachmentImageSize} / 2);\r\n                background-size: cover; \r\n                background-repeat: no-repeat; \r\n                background-position: 50% 50%;\r\n\r\n                &-text {\r\n                    font-family: IBM Plex Sans;\r\n                    font-style: normal;\r\n                    font-weight: normal;\r\n                    font-size: 14px;\r\n                    line-height: 18px;\r\n                    text-decoration-line: underline;\r\n                    color: #FFFFFF;\r\n                    background: black;\r\n                    width: 100px;\r\n                    height: 100px;\r\n                    opacity: 0.7;\r\n                    text-align: center;\r\n                    line-height: 100px; \r\n                    cursor: pointer;               \r\n                }\r\n            }\r\n\r\n            &-link {\r\n                width: calc(#{$chatMessageAttachmentImageSize} + 25px);\r\n                padding-left: 12px;\r\n                padding-top: 8px;\r\n                padding-bottom: 8px;\r\n                padding-right: 12px;\r\n\r\n                &:hover {\r\n                    cursor: pointer;\r\n                }              \r\n\r\n                &:hover &-download {\r\n                    display: block;\r\n                }              \r\n\r\n                &-name {\r\n                    font-family: IBM Plex Sans;\r\n                    font-style: normal;\r\n                    font-weight: normal;\r\n                    font-size: 14px;\r\n                    line-height: 18px;\r\n                    overflow: hidden;\r\n                    white-space: nowrap;\r\n                    text-overflow: ellipsis; \r\n                    /*padding-left: 8px;*/\r\n                    \r\n                    width: calc(#{$chatMessageAttachmentImageSize} - 30px);\r\n\r\n                    color: $chatMessageAttachmentLinkTextColor;\r\n\r\n                    &:hover {\r\n                        text-decoration-line: underline;\r\n                    }\r\n                }\r\n        \r\n                &-download {\r\n                    display: none;\r\n                }            \r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./chat-message-attachment-multi-image-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"p-col p-col-nogutter ui-border\" [ngClass]=\"{'chat-message-attachment-border': showBorder}\">\r\n\r\n    <div class=\"p-grid p-nogutter p-flex-column\">\r\n    \r\n        <div class=\"p-col p-col-nogutter ui-border\">\r\n            <div class=\"chat-message-attachment-image\">\r\n                <div class=\"p-d-flex\">\r\n                    <div class=\"chat-message-attachment-image-sub\" [ngStyle]=\"{'background-image': 'url(' + images[0].url +')'}\"></div>\r\n                    <div class=\"chat-message-attachment-image-sub\" [ngStyle]=\"{'background-image': 'url(' + images[1].url +')'}\"></div>\r\n                </div>                \r\n                <div class=\"p-d-flex\">                \r\n                    <div class=\"chat-message-attachment-image-sub\" [ngStyle]=\"{'background-image': 'url(' + images[2].url +')'}\"></div>\r\n                    <div class=\"chat-message-attachment-image-sub chat-message-attachment-image-sub\" [ngStyle]=\"{'background-image': 'url(' + images[3].url +')'}\">\r\n                        <div (click)=\"showImageViewer.emit(images)\" class=\"chat-message-attachment-image-sub-text\">+2 more</div>\r\n                    </div>\r\n                </div>                    \r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"p-d-flex p-jc-between chat-message-attachment-image-link\">\r\n            <div class=\"p-as-center ui-border\">\r\n                <div #imageName tooltipStyleClass=\"display:flex\" class=\"chat-message-attachment-image-link-name\" pTooltip=\"{{imageCountTooltip}}\" tooltipPosition=\"bottom\">{{images.length + \" images\"}}</div>\r\n            </div>\r\n            <div class=\"p-as-center ui-border\">\r\n                <a class=\"chat-message-attachment-image-link-download pi pi-download\" pTooltip=\"Download\" tooltipPosition=\"bottom\" href=\"{{images[0].url}}\" target=\"_blank\" download=\"{{images[0].url}}\"></a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ChatMessageAttachmentPdfComponent",
            "id": "component-ChatMessageAttachmentPdfComponent-f00aafed9d2e07d2f1da4cb53e4cb7b6",
            "file": "src/stories/chat-message-attachment-pdf-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-message-attachment-pdf",
            "styleUrls": [
                "./chat-message-attachment-pdf-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-message-attachment-pdf-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "attachment",
                    "line": 20,
                    "type": "ChatMessageAttachment"
                },
                {
                    "name": "showBorder",
                    "defaultValue": "false",
                    "line": 23,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "attachmentName",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "attachmentNameElement",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'attachmentName'"
                        }
                    ]
                },
                {
                    "name": "attachmentNameTooltip",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "attachmentType",
                    "defaultValue": "\"pdf\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getAttachmentName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Input, ViewChild, ElementRef, Component, OnInit, AfterViewInit } from '@angular/core';\r\nimport { ChatMessageAttachment } from './chat-message-attachment';\r\nimport { ChatMessageAttachmentImageComponent } from './chat-message-attachment-image-component';\r\n\r\n@Component({\r\n    selector: 'app-chat-message-attachment-pdf',\r\n    templateUrl: './chat-message-attachment-pdf-component.html',\r\n    styleUrls: ['./chat-message-attachment-pdf-component.scss']\r\n  })\r\n\r\nexport class ChatMessageAttachmentPdfComponent implements OnInit, AfterViewInit {\r\n    \r\n    readonly attachmentType:string = \"pdf\";\r\n\r\n    attachmentName: string = \"\";  \r\n    attachmentNameTooltip:string = \"\";\r\n    @ViewChild('attachmentName') attachmentNameElement: ElementRef;\r\n\r\n    @Input()\r\n    attachment: ChatMessageAttachment;\r\n\r\n    @Input() \r\n    showBorder: boolean = false;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    //\r\n    // function   : component initialisation event handler\r\n    //\r\n    // parameters : none.\r\n    //\r\n    // returns    : none.\r\n    //    \r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n      let attachmentNameElement: HTMLDivElement = this.attachmentNameElement.nativeElement;\r\n      if (attachmentNameElement.scrollWidth > attachmentNameElement.clientWidth) {\r\n        this.attachmentNameTooltip = this.getAttachmentName();\r\n      }\r\n    }\r\n\r\n    getAttachmentName() {\r\n      if (!this.attachmentName) {\r\n        let parts:string[] = this.attachment.url.split('/');\r\n        this.attachmentName = parts[parts.length-1];\r\n      }\r\n      return (this.attachmentName);\r\n    }    \r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './assets/mytheme/variables';\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}\r\n\r\n.chat-message {\r\n    margin-top:6px;    \r\n    width: 400px;\r\n    padding-top: 8px;\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n\r\n    &-attachment {\r\n\r\n        &-border {\r\n            margin-left: 12px;\r\n            margin-bottom: 8px;                \r\n            border: 1px solid #DBDBDB;\r\n            border-radius: 2px;                \r\n        }\r\n\r\n        &-link {\r\n            width: $chatMessageAttachmentPdfWidth;\r\n\r\n            padding-left: 2px;\r\n            padding-right: 12px;\r\n\r\n            &-icon {\r\n                height: 49px;\r\n                width: 50px;\r\n                line-height: 49px;\r\n            }\r\n\r\n            &:hover {\r\n                cursor: pointer;\r\n            }              \r\n\r\n            &:hover &-download {\r\n                display: block;\r\n            }              \r\n\r\n            &-size {\r\n                font-family: IBM Plex Sans;\r\n                font-style: normal;\r\n                font-weight: normal;\r\n                font-size: 12px;\r\n                line-height: 16px;\r\n                color: #959CAD;\r\n            }\r\n\r\n            &-name {\r\n                font-family: IBM Plex Sans;\r\n                font-style: normal;\r\n                font-weight: normal;\r\n                font-size: 14px;\r\n                line-height: 18px;\r\n                overflow: hidden;\r\n                white-space: nowrap;\r\n                text-overflow: ellipsis; \r\n                padding-top: 8px;\r\n\r\n                width: calc(#{$chatMessageAttachmentPdfWidth} - 85px);\r\n\r\n                color: $chatMessageAttachmentLinkTextColor;\r\n\r\n                &:hover {\r\n                    text-decoration-line: underline;\r\n                }\r\n            }\r\n    \r\n            &-download {\r\n                font-size: 1.0em;\r\n                padding-top: 8px;\r\n                display: none;\r\n            }            \r\n        }\r\n    }\r\n}",
                    "styleUrl": "./chat-message-attachment-pdf-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "    <div class=\"p-grid p-nogutter chat-message-attachment-link\" [ngClass]=\"{'chat-message-attachment-border': showBorder}\" >\r\n\r\n        <div class=\"p-col-fixed p-col-nogutter ui-border p-text-center\">\r\n            <div class=\"chat-message-attachment-link-icon pi pi-file-pdf\"></div>\r\n        </div>\r\n        <div class=\"p-col-fixed p-col-nogutter ui-border\">\r\n\r\n            <div class=\"p-d-flex p-flex-column\">\r\n                <div #attachmentName tooltipStyleClass=\"ui-tooltip-flex\" class=\"chat-message-attachment-link-name\" pTooltip=\"{{attachmentNameTooltip}}\" tooltipPosition=\"bottom\">{{getAttachmentName()}}</div>\r\n                <div class=\"chat-message-attachment-link-size\">{{attachment.size}}</div>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"p-col p-col-nogutter ui-border p-text-center\">\r\n            <a style=\"float:right\" class=\"chat-message-attachment-link-download pi pi-download\" pTooltip=\"Download\" tooltipPosition=\"bottom\" href=\"{{attachment.url}}\" target=\"_blank\" download=\"{{attachment.url}}\"></a>\r\n        </div>        \r\n\r\n    </div>\r\n"
        },
        {
            "name": "ChatMessageAttachmentVideoComponent",
            "id": "component-ChatMessageAttachmentVideoComponent-f2beab4db44bdc91ad456d68309485f5",
            "file": "src/stories/chat-message-attachment-video-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-message-attachment-video",
            "styleUrls": [
                "./chat-message-attachment-video-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-message-attachment-video-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "attachment",
                    "line": 20,
                    "type": "ChatMessageAttachment"
                },
                {
                    "name": "showBorder",
                    "defaultValue": "false",
                    "line": 23,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "attachmentName",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "attachmentType",
                    "defaultValue": "\"video\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "imageName",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'imageName'"
                        }
                    ]
                },
                {
                    "name": "imageNameTooltip",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "video",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'video'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getAttachmentName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Input, ViewChild, ElementRef, Component, OnInit, AfterViewInit } from '@angular/core';\r\nimport { ChatMessageAttachment } from './chat-message-attachment';\r\n\r\n@Component({\r\n    selector: 'app-chat-message-attachment-video',\r\n    templateUrl: './chat-message-attachment-video-component.html',\r\n    styleUrls: ['./chat-message-attachment-video-component.scss']\r\n  })\r\n\r\nexport class ChatMessageAttachmentVideoComponent implements OnInit, AfterViewInit {\r\n    \r\n    readonly attachmentType:string = \"video\";\r\n\r\n    attachmentName: string = \"\";\r\n    imageNameTooltip:string = \"\";\r\n    @ViewChild('imageName') imageName: ElementRef;\r\n    @ViewChild('video') video: ElementRef;\r\n\r\n    @Input()\r\n    attachment: ChatMessageAttachment;\r\n\r\n    @Input() \r\n    showBorder: boolean = false;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    //\r\n    // function   : component initialisation event handler\r\n    //\r\n    // parameters : none.\r\n    //\r\n    // returns    : none.\r\n    //    \r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n      let imageNameElement: HTMLDivElement = this.imageName.nativeElement;\r\n      if (imageNameElement.scrollWidth > imageNameElement.clientWidth) {\r\n        this.imageNameTooltip = this.getAttachmentName();\r\n      }\r\n      //enable video controls\r\n      let videoNativeElement:HTMLMediaElement = this.video.nativeElement;\r\n      videoNativeElement.controls = true;\r\n    }\r\n\r\n    getAttachmentName() {\r\n      if (!this.attachmentName) {\r\n        let parts:string[] = this.attachment.url.split('/');\r\n        this.attachmentName = parts[parts.length-1];\r\n      }\r\n      return (this.attachmentName);\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './assets/mytheme/variables';\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}\r\n\r\n.chat-message {\r\n    margin-top:6px;    \r\n    width: 400px;\r\n    padding-top: 8px;\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n\r\n    &-attachment {\r\n        \r\n        &-border {\r\n            padding-top: 8px;\r\n            margin-left: 12px;\r\n            margin-bottom: 8px;                \r\n            border: 1px solid #DBDBDB;\r\n            border-radius: 2px;   \r\n            width: calc(#{$chatMessageAttachmentVideoWidth} + (2 * #{$margin}) + 2px);\r\n        }        \r\n        \r\n        &-video {\r\n            border-radius: 2px; \r\n            width: $chatMessageAttachmentVideoWidth; \r\n            //object-fit: cover;\r\n            margin-left:12px;\r\n            margin-right: 12px;\r\n            display:block;\r\n\r\n            &-link {\r\n                width: calc(#{$chatMessageAttachmentVideoWidth} + 25px);\r\n                padding-left: 12px;\r\n                padding-top: 8px;\r\n                padding-bottom: 8px;\r\n                padding-right: 12px;\r\n\r\n                &:hover {\r\n                    cursor: pointer;\r\n                }              \r\n\r\n                &:hover &-download {\r\n                    display: block;\r\n                }              \r\n\r\n                &-name {\r\n                    font-family: IBM Plex Sans;\r\n                    font-style: normal;\r\n                    font-weight: normal;\r\n                    font-size: 14px;\r\n                    line-height: 18px;\r\n                    overflow: hidden;\r\n                    white-space: nowrap;\r\n                    text-overflow: ellipsis; \r\n                    \r\n                    width: calc(#{$chatMessageAttachmentVideoWidth} - 30px);\r\n\r\n                    color: $chatMessageAttachmentLinkTextColor;\r\n\r\n                    &:hover {\r\n                        text-decoration-line: underline;\r\n                    }\r\n                }\r\n        \r\n                &-download {\r\n                    font-size: 1.0em;\r\n                    display: none;\r\n                }            \r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./chat-message-attachment-video-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"p-col p-col-nogutter ui-border\" [ngClass]=\"{'chat-message-attachment-border': showBorder}\" >\r\n\r\n    <div class=\"p-grid p-nogutter p-flex-column\">\r\n    \r\n        <div class=\"p-col p-col-nogutter ui-border\">\r\n            <video #video controls controlsList=\"nodownload\" class=\"chat-message-attachment-video\">\r\n                <source src=\"{{attachment.url}}\" type=\"{{attachment.mime}}\">\r\n            </video>\r\n        </div>\r\n\r\n        <div class=\"p-d-flex p-jc-between chat-message-attachment-video-link\">\r\n            \r\n            <div class=\"p-d-flex p-flex-column\">\r\n                <div #imageName tooltipStyleClass=\"ui-tooltip-flex\" class=\"chat-message-attachment-video-link-name\" pTooltip=\"{{imageNameTooltip}}\" tooltipPosition=\"bottom\">{{getAttachmentName()}}</div>\r\n                <div class=\"chat-message-attachment-link-size\">{{attachment.size}}</div>\r\n            </div>\r\n\r\n            <div class=\"p-col p-col-nogutter ui-border p-text-center\">\r\n                <a style=\"float:right\" class=\"chat-message-attachment-video-link-download pi pi-download\" pTooltip=\"Download\" tooltipPosition=\"bottom\" href=\"{{attachment.url}}\" target=\"_blank\" download=\"{{attachment.url}}\"></a>\r\n            </div> \r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ChatMessageComponent",
            "id": "component-ChatMessageComponent-0770e2cfe2d484444f9acf436c54b9d5",
            "file": "src/stories/chat-message-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-message",
            "styleUrls": [
                "./chat-message-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-message-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "attachments",
                    "line": 47,
                    "type": "ChatMessageAttachment[]"
                },
                {
                    "name": "message",
                    "defaultValue": "\"\"",
                    "line": 38,
                    "type": "string"
                },
                {
                    "name": "myobj",
                    "defaultValue": "{}",
                    "description": "<p>control inputs</p>\n",
                    "line": 32,
                    "type": "object"
                },
                {
                    "name": "name",
                    "defaultValue": "\"james\"",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "status",
                    "line": 44,
                    "type": "\"sending\" | \"sent\" | \"delivered\" | \"seen\" | \"failed\""
                },
                {
                    "name": "type",
                    "defaultValue": "'customer'",
                    "line": 41,
                    "type": "\"customer\" | \"agent\" | \"auto\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onRetry",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 50,
                    "type": "EventEmitter"
                },
                {
                    "name": "showImageViewer",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "attachmentComponentRefs",
                    "defaultValue": "<ComponentRef<any>>{}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "attachmentHost",
                    "type": "AttachmentDirective",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "AttachmentDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "chatMessageClass",
                    "defaultValue": "\"chat-message-default-width\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "chatMessageMsgClass",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "chatMessageMsgTextClass",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "chatMessageNameRightClass",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "chatMessageStatusMessageClass",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "chatMessageStatusPositionClass",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "initial",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "injector",
                    "defaultValue": "null",
                    "type": "Injector",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "numAttachments",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "stateStartDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "statusMessage",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "timeInStateCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "timeInStateDisplay",
                    "defaultValue": "\"Now\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "timeInStateTimer",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "alreadyExist",
                    "args": [
                        {
                            "name": "currentAttachments",
                            "type": ""
                        },
                        {
                            "name": "newUrl",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 204,
                    "jsdoctags": [
                        {
                            "name": "currentAttachments",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newUrl",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 400
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 394
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 379
                },
                {
                    "name": "refreshChatMessageMsgClass",
                    "args": [
                        {
                            "name": "type",
                            "type": ""
                        },
                        {
                            "name": "status",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshStatusMessage",
                    "args": [
                        {
                            "name": "type",
                            "type": ""
                        },
                        {
                            "name": "status",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshTimeInStateDisplay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132
                },
                {
                    "name": "removeAllAttachment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183
                },
                {
                    "name": "restartTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 349
                },
                {
                    "name": "showAttachments",
                    "args": [
                        {
                            "name": "attachments",
                            "type": "ChatMessageAttachment[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "jsdoctags": [
                        {
                            "name": "attachments",
                            "type": "ChatMessageAttachment[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 354
                },
                {
                    "name": "statusMessageClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176
                },
                {
                    "name": "stopTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 365
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ComponentRef, Component, ViewChild, Injector, ReflectiveInjector, ComponentFactoryResolver, OnInit, OnDestroy, Input, Output, EventEmitter, SimpleChanges, NgZone } from '@angular/core';\nimport { formatDate } from '@angular/common';\n\nimport { AttachmentDirective } from './chat-message-attachment-directive';\nimport { ChatMessageAttachmentImageComponent } from './chat-message-attachment-image-component';\nimport { ChatMessageAttachmentPdfComponent } from './chat-message-attachment-pdf-component';\nimport { ChatMessageAttachmentMultiImageComponent } from './chat-message-attachment-multi-image-component';\nimport { ChatMessageAttachmentVideoComponent } from './chat-message-attachment-video-component';\nimport { ChatMessageAttachment } from './chat-message-attachment'\n\n@Component({\n    selector: 'app-chat-message',\n    templateUrl: './chat-message-component.html',\n    styleUrls: ['./chat-message-component.scss']\n  })\n\n  export class ChatMessageComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    //reference the underlying attachment component object\n    @ViewChild(AttachmentDirective, {static: true}) attachmentHost: AttachmentDirective;\n\n    //this is our array of attachment components components\n    attachmentComponentRefs = <ComponentRef<any>>{};\n    injector: Injector = null;  \n    numAttachments: number = 0;\n    chatMessageMsgTextClass: string = \"\";\n    chatMessageClass: string = \"chat-message-default-width\";\n    /**\n     * control inputs\n     */\n    @Input()\n    myobj: object = {};\n\n    @Input()\n    name: string = \"james\"; \n\n    @Input()\n    message: string = \"\";\n\n    @Input()\n    type : 'customer' | 'agent' | 'auto' = 'customer';\n\n    @Input()\n    status : 'sending' | 'sent' | 'delivered' | 'seen' | 'failed';\n\n    @Input()\n    attachments: ChatMessageAttachment[];\n\n    @Output()\n    onRetry = new EventEmitter<any>();\n\n    @Output()\n    showImageViewer = new EventEmitter<any>();\n\n    initial: string = \"\";\n    chatMessageMsgClass:string = \"\";\n    chatMessageNameRightClass: string =\"\";\n    chatMessageStatusPositionClass: string = \"\";\n    chatMessageStatusMessageClass: string = \"\";    \n    statusMessage: string = \"\";\n    stateStartDate: string;\n    timeInStateDisplay: string = \"Now\";\n    timeInStateCount: number = 0;\n    timeInStateTimer: any = null;\n\n    constructor(private ngZone: NgZone, private componentFactoryResolver: ComponentFactoryResolver) {\n    }\n\n    //\n    // function   : monitor for property changes\n    //\n    // parameters : changes - property change object\n    //\n    // returns    : none.\n    //    \n    ngOnChanges (changes: SimpleChanges) {\n      for (const propName in changes) {\n        switch (propName) {\n\n          case \"name\":\n            this.initial = changes[propName].currentValue ? changes[propName].currentValue[0].toUpperCase() : \"\";            \n            break;\n\n          case \"status\":\n            //only refresh if not customer message\n            if (this.type!=='customer') {\n              this.restartTimer();\n              this.refreshStatusMessage(this.type, changes[propName].currentValue);\n              this.refreshChatMessageMsgClass(this.type, changes[propName].currentValue);                        \n            }\n            break;\n\n          case \"type\":\n            this.restartTimer();\n            switch(changes[propName].currentValue) {\n              case \"customer\":\n                this.initial = this.name ? this.name[0].toUpperCase() : \"\";\n                this.chatMessageStatusPositionClass  = \"chat-message-status-left\";\n                break;\n              case \"agent\":\n                this.initial = this.name ? this.name[0].toUpperCase() : \"\";\n                this.chatMessageStatusPositionClass = \"chat-message-status-right\";\n                break;\n              case \"auto\":\n                this.initial = \"A\";\n                this.chatMessageStatusPositionClass = \"chat-message-status-right\";\n                break;\n            }\n            this.refreshStatusMessage(changes[propName].currentValue, this.status);\n            this.refreshChatMessageMsgClass(changes[propName].currentValue, this.status);            \n            break;\n        }\n      }\n    }\n\n    refreshChatMessageMsgClass(type, status) {\n      switch (type) {\n        case \"customer\":\n          this.chatMessageMsgClass = \"chat-message-msg-customer\";          \n          break;\n        case \"agent\":\n          this.chatMessageMsgClass = status === \"failed\" ? \"chat-message-msg-agent-failed\" : \"chat-message-msg-agent\";\n          this.chatMessageNameRightClass = status === \"failed\" ? \"chat-message-name-agent-failed\" : \"chat-message-name-agent\";          \n          break;\n        case \"auto\":   \n          this.chatMessageMsgClass = status === \"failed\" ? \"chat-message-msg-auto-failed\" : \"chat-message-msg-auto\";\n          this.chatMessageNameRightClass = status === \"failed\" ? \"chat-message-name-auto-failed\" : \"chat-message-name-auto\";                          \n          break;\n      }\n    }\n\n    refreshTimeInStateDisplay() {\n      if (this.timeInStateCount === 0) {\n        this.timeInStateDisplay = \"Now\";\n      } else if (this.timeInStateCount < 60) {\n        this.timeInStateDisplay = this.timeInStateCount + \"s ago\";\n      } else {\n        this.timeInStateDisplay = Math.floor(this.timeInStateCount/60).toString() + \"m ago\";        \n      }\n    }\n\n    refreshStatusMessage(type, status) {\n      //reset time in state\n      this.stateStartDate = formatDate(new Date(), \"MMM d, y 'at' h:mma\", 'en');\n      this.timeInStateCount = 0;\n      this.refreshTimeInStateDisplay();\n\n      if (type===\"customer\") {\n        this.statusMessage = \"\";\n      } else {\n        switch (status) {\n          case \"sending\":\n            this.chatMessageStatusMessageClass = \"chat-message-status-message-sending\";\n            this.statusMessage = \"Sending...\";\n            break;\n          case \"sent\":\n            this.chatMessageStatusMessageClass = \"chat-message-status-message-sent\";            \n            this.statusMessage = \"Sent\";\n            break;\n          case \"delivered\":\n            this.chatMessageStatusMessageClass = \"chat-message-status-message-delivered\";            \n            this.statusMessage = \"Delivered\";\n            break;\n          case \"seen\":\n            this.chatMessageStatusMessageClass = \"chat-message-status-message-seen\";            \n            this.statusMessage = \"Seen\";\n            break;\n          case \"failed\":\n            this.chatMessageStatusMessageClass = \"chat-message-status-message-failed\";            \n            this.statusMessage = \"Failed to send. Click to retry\";                  \n            break;\n        }\n      }    \n    }\n\n    statusMessageClick() {\n      //only valid in failed state\n      if (this.status==='failed') {\n        this.onRetry.emit({});\n      }\n    }\n\n    removeAllAttachment() {\n      let i:number = 0;      \n      //delete current attactments, unsubscribe any event handlers\n      let componentRefCount:number = Object.keys(this.attachmentComponentRefs).length;\n      for (i=0; i < componentRefCount; i++) {\n        switch (this.attachmentComponentRefs[i].instance.attachmentType) {\n          case \"multi-image\":\n            (this.attachmentComponentRefs[i].instance as ChatMessageAttachmentMultiImageComponent).showImageViewer.unsubscribe();\n            break;\n          case \"image\":\n          case \"pdf\":\n            break;\n        }\n      }\n      this.attachmentHost.viewContainerRef.clear();\n      this.attachmentComponentRefs = <ComponentRef<any>>{};\n\n      //reset attachment count\n      this.numAttachments = 0;      \n    }\n\n    alreadyExist(currentAttachments, newUrl) {\n      let exists = false;\n      for (let i=0; i < currentAttachments.length; i++) {\n        if (currentAttachments.url===newUrl) {\n          exists = true;\n          break;\n        }\n      }\n      return (exists);\n    }\n\n    showAttachments(attachments:ChatMessageAttachment[]) {\n      let i:number = 0;\n     \n      //as we are creating the component dynamically we have to \n      //inject the service object each time we create a new task component\n      /*\n      this.injector = ReflectiveInjector.resolveAndCreate(\n        [{\n          provide: 'rostrvmService', \n          useValue: this.rostrvmService\n        }]);      \n      */\n\n      //monitor for changes in task list\n      let componentFactory, imageAttachments:ChatMessageAttachment[] = [], componentRef;\n   \n      //in the case of images attachment, 3 and less are shown individually, more\n      //than 3 are shown as a group and link to carousel viewer\n      for (i = attachments.length - 1; i >= 0; i--) {\n        let parts = this.attachments[i].url.split('.');\n\n        //user either the mime type or file extension to workout the attchment type\n        switch (this.attachments[i].mimeType || parts[parts.length-1]) { \n          case \"image/png\":\n          case \"png\":\n          case \"image/jpeg\":\n          case \"jpeg\":\n          case \"image/bmp\":\n          case \"bmp\":\n              imageAttachments.push({ \n                \"url\": attachments[i].url,\n                \"size\": attachments[i].size,\n                \"mimeType\": attachments[i].mimeType, \n              })\n              break;\n        }\n      }\n\n      //more than 3 images?\n      if (imageAttachments.length > 3) {\n        //create image group attachment\n        componentFactory = this.componentFactoryResolver.resolveComponentFactory(ChatMessageAttachmentMultiImageComponent);\n        componentRef = this.attachmentHost.viewContainerRef.createComponent(componentFactory,0,this.injector);\n        // add reference for newly created component\n        this.attachmentComponentRefs[this.numAttachments++] = componentRef;\n        //tell the component its attachment\n        componentRef.instance['images'] = imageAttachments;\n        //need to subscribe to show event viewer request\n        (componentRef.instance as ChatMessageAttachmentMultiImageComponent).showImageViewer.subscribe((images) => {\n          this.showImageViewer.emit(images);\n        })\n        //if there is only a single multi-image attachment then size message text width to image width\n        if (attachments.length===imageAttachments.length) {\n          this.chatMessageClass = \"chat-message-image-width\";\n        }\n        //if there is more than one individual attachment then show borders around them\n        componentRef.instance['showBorder'] = attachments.length > imageAttachments.length;        \n      } \n      \n      //process other attachments individually, including images if less than 3\n      for (i = 0; i < attachments.length; i++) {\n        let parts = attachments[i].url.split('.');\n        componentFactory = null, componentRef = null;;\n        \n        switch (parts[parts.length-1]) {\n          case \"png\":\n          case \"jpeg\":\n            //only process if 3 or less images  \n            if (imageAttachments.length <= 3) {\n              componentFactory = this.componentFactoryResolver.resolveComponentFactory(ChatMessageAttachmentImageComponent);\n              componentRef = this.attachmentHost.viewContainerRef.createComponent(componentFactory,0,this.injector);\n              // add reference for newly created component\n              this.attachmentComponentRefs[this.numAttachments++] = componentRef;\n              //tell the component its attachment\n              componentRef.instance['attachment'] = attachments[i];\n              //if there is only a single image attachment, size message text width to image width\n              if (attachments.length===1) {\n                this.chatMessageClass = \"chat-message-image-width\";\n              }\n              //if there is more than one individual attachment then show borders around them\n              componentRef.instance['showBorder'] = \n                (imageAttachments.length===2) || \n                (imageAttachments.length===3) ||\n                attachments.length > imageAttachments.length;\n            }\n            break;\n\n          case \"pdf\":\n            componentFactory = this.componentFactoryResolver.resolveComponentFactory(ChatMessageAttachmentPdfComponent);\n            componentRef = this.attachmentHost.viewContainerRef.createComponent(componentFactory,0,this.injector);\n            // add reference for newly created component\n            this.attachmentComponentRefs[this.numAttachments++] = componentRef;\n            //tell the component its attachment\n            componentRef.instance['attachment'] = this.attachments[i];            \n            componentRef.instance['showBorder'] = this.message!=='';\n              //if there is only a single image attachment, size message text width to image width\n              if (attachments.length===1) {\n                this.chatMessageClass = \"chat-message-pdf-width\";\n              }            \n            break;\n\n          case \"flv\":\n          case \"video/x-flv\":\n          case \"mp4\":\n          case \"video/mp4\":\n          case \"m3u8\":\n          case \"application/x-mpegURL\":\n          case \".ts\":\n          case \"video/MP2T\":\n          case \"3gp\":\n          case \"video/3gpp\":\n          case \"mov\":\n          case \"video/quicktime\":\n          case \"avi\":\n          case \"video/x-msvideo\":\n          case \"wmv\":\n          case \"video/x-ms-wmv\":\n            componentFactory = this.componentFactoryResolver.resolveComponentFactory(ChatMessageAttachmentVideoComponent);\n            componentRef = this.attachmentHost.viewContainerRef.createComponent(componentFactory,0,this.injector);\n            // add reference for newly created component\n            this.attachmentComponentRefs[this.numAttachments++] = componentRef;\n            //tell the component its attachment\n            componentRef.instance['attachment'] = attachments[i];\n            //if there is only a single image attachment, size message text width to image width\n            if (attachments.length===1) {\n              //this.chatMessageClass = \"chat-message-image-width\";\n            }\n            //if there is more than one individual attachment then show borders around them\n            componentRef.instance['showBorder'] = attachments.length > 1;            \n            break;\n        }\n      }\n    }\n\n    restartTimer() {\n      this.stopTimer();\n      this.startTimer();\n    }\n\n    startTimer() {\n      //make sure time runs inside zone so angular \n      //angular change detection works and the UI is refreshed\n      this.ngZone.run(()=> {\n        this.timeInStateTimer = setInterval(() => {   \n          this.timeInStateCount++;\n          this.refreshTimeInStateDisplay();\n        }, 1000);\n      }) \n    }\n\n    stopTimer() {\n      if (this.timeInStateTimer) {\n        clearInterval(this.timeInStateTimer);\n        this.timeInStateTimer = null;\n      }\n    }\n\n    //\n    // function   : component initialisation event handler\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //    \n    ngOnInit() {\n      //do we have any attachments?\n      if (this.attachments) {\n        this.showAttachments(this.attachments);\n      }      \n    }\n\n    //\n    // function   : called as the component is being destroyed. Clean-up\n    //              any subscription and event handler bindings\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    ngOnDestroy() {\n      //make sure timer is stopped\n      this.stopTimer();\n      this.removeAllAttachment();\n    }\n\n    ngAfterViewInit() {\n      //determine the attachment padding if no message is present\n      if (this.message==='') {\n        if (this.attachments && (this.attachments[0].url.indexOf(\".pdf\") < 0)) {\n          this.chatMessageMsgTextClass = \"chat-message-msg-no-text\";\n        }\n      } else {\n        this.chatMessageMsgTextClass = \"chat-message-msg-text\";\n      }\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './assets/mytheme/variables';\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}\r\n\r\n.p-col-fixed {\r\n    padding:0px;\r\n}\r\n\r\n.chat-message {\r\n    margin-top:6px;    \r\n    padding-top: 8px;\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n\r\n    &-default-width {\r\n        width: $chatMessageComponentDefaultWidth;\r\n    }\r\n\r\n    &-image-width {\r\n        width: $chatMessageComponentImageWidth;\r\n    }\r\n\r\n    &-pdf-width {\r\n        width: $chatMessageComponentPdfWidth;\r\n    }\r\n\r\n    &-status {\r\n        margin-top:-13px;\r\n        font-family: IBM Plex Sans;\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 12px; \r\n        line-height: 16px;\r\n        height: 16px;\r\n\r\n        &-left {\r\n            float: left;\r\n        }\r\n\r\n        &-right {\r\n            float: right;\r\n        }\r\n\r\n        &-time-in-state {\r\n            color: $chatMessageStatusTimeInStateTextColor;\r\n            cursor: pointer;\r\n        }\r\n\r\n        &-message-sending {\r\n            color: $chatMessageStatusMessageSendingTextColor;\r\n        }\r\n\r\n        &-message-sent {\r\n            color: $chatMessageStatusMessageSentTextColor;\r\n        }\r\n\r\n        &-message-delivered {\r\n            color: $chatMessageStatusMessageDeliveredTextColor;\r\n        }\r\n\r\n        &-message-seen {\r\n            color: $chatMessageStatusMessageSeenTextColor;\r\n        }\r\n\r\n        &-message-failed {\r\n            color: $chatMessageStatusMessageFailedTextColor;\r\n            cursor: pointer;\r\n\r\n\r\n            &:hover {\r\n                text-decoration: underline;\r\n            }\r\n        }\r\n\r\n    }\r\n    &-name {\r\n        width: $chatMessageNamePlateSize;\r\n        height: $chatMessageNamePlateSize;\r\n        line-height: $chatMessageNamePlateSize;\r\n        border-radius: 4px;\r\n        font-family: IBM Plex Sans;\r\n        font-style: normal;\r\n        font-weight: 600;\r\n        font-size: 24px;\r\n        text-align: center;\r\n        padding-top: 8px;\r\n\r\n        &-customer {\r\n            border-radius: 4px;            \r\n            background-color: $chatMessageCustomerNameBgColor;\r\n            border-color: $chatMessageCustomerNameBorderColor;\r\n            color: $chatMessageCustomerNameTextColor;\r\n        }\r\n\r\n        &-agent {\r\n            border-radius: 4px;\r\n            background-color: $chatMessageAgentNameBgColor;\r\n            border-color: $chatMessageAgentNameBorderColor ;            \r\n            color: $chatMessageAgentNameTextColor;\r\n\r\n            &-failed {\r\n                background-color: $chatMessageAgentNameBgColorFailed;\r\n                border-color: $chatMessageAgentNameBorderColorFailed;\r\n                color: $chatMessageAgentNameTextColorFailed;\r\n            }\r\n        }\r\n\r\n        &-auto {\r\n            border-radius: 4px;            \r\n            background-color: $chatMessageAutoNameBgColor;\r\n            border-color: $chatMessageAutoNameBorderColor;\r\n            color: $chatMessageAutoNameTextColor;\r\n\r\n            &-failed {\r\n                background-color: $chatMessageAutoNameBgColorFailed;\r\n                border-color: $chatMessageAutoNameBorderColorFailed;\r\n                color: $chatMessageAutoNameTextColorFailed;\r\n            }\r\n        }        \r\n    }\r\n\r\n    &-msg {\r\n        font-size: 14px;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        display: -webkit-box;\r\n        -webkit-box-orient: vertical;    \r\n        border-radius: 4px;    \r\n        min-height: 24px;\r\n        border-width: 1px;\r\n        border-style: solid;\r\n\r\n        &-text {\r\n            padding-left:12px;\r\n            padding-right:12px;\r\n            padding-top:8px;\r\n            padding-bottom:8px;\r\n        }\r\n\r\n        &-no-text {\r\n            padding-top:8px;\r\n        }\r\n\r\n        &-customer {\r\n            background-color: $chatMessageCustomerMsgBgColor;\r\n            border-color: $chatMessageCustomerMsgBorderColor;\r\n            color: $chatMessageCustomerMsgTextColor;\r\n        }\r\n\r\n        &-agent {\r\n            background-color: $chatMessageAgentMsgBgColor;\r\n            border-color: $chatMessageAgentMsgBorderColor;\r\n            color: $chatMessageAgentMsgTextColor;        \r\n            \r\n            &-failed {\r\n                background-color: $chatMessageAgentMsgBgColorFailed;\r\n                border-color: $chatMessageAgentMsgBorderColorFailed;\r\n                color: $chatMessageAgentMsgTextColorFailed;\r\n            }\r\n        }\r\n\r\n        &-auto {\r\n            background-color: $chatMessageAutoMsgBgColor;\r\n            border-color: $chatMessageAutoMsgBorderColor;\r\n            color: $chatMessageAutoMsgTextColor;\r\n\r\n            &-failed {\r\n                background-color: $chatMessageAutoMsgBgColorFailed;\r\n                border-color: $chatMessageAutoMsgBorderColorFailed;\r\n                color: $chatMessageAutoMsgTextColorFailed;\r\n            }\r\n        }        \r\n    }\r\n}\r\n\r\n",
                    "styleUrl": "./chat-message-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngZone",
                        "type": "NgZone"
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver"
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"chat-message\" [ngClass]=\"chatMessageClass\">\n\n    <div class=\"p-grid\">\n\n      <div *ngIf=\"!(type==='agent' || type==='auto')\" class=\"p-col-fixed ui-border \">\n          <div class=\"chat-message-name\">\n            <div class=\"chat-message-name-customer\">{{initial}}</div>\n          </div>\n      </div>\n\n      <div class=\"p-col ui-border\">\n\n        <div class=\"p-grid p-flex-column\">\n          <div class=\"p-col\">\n            <span class=\"ui-border chat-message-msg\" [ngClass]=\"chatMessageMsgClass\">\n\n              <!--message content, include message and any number of attachment components-->\n              <div class=\"p-grid p-nogutter p-flex-column\">\n\n                <!--content message-->\n                <div class=\"p-col p-col-nogutter ui-border\">\n                    <div [ngClass]=\"chatMessageMsgTextClass\">{{message}}</div>\n                </div>\n\n                <ng-template attachmentHost></ng-template>\n\n              </div>\n\n            </span>\n\n          </div>\n        \n          <div class=\"p-col\">\n            <div class=\"p-d-flex p-flex-column p-flex-md-row chat-message-status\" [ngClass]=\"chatMessageStatusPositionClass\">\n              <div *ngIf=\"!(statusMessage==='')\" class=\"p-mr-2 ui-border\"> \n                <span (click)=\"statusMessageClick();\" [ngClass]=\"chatMessageStatusMessageClass\">{{statusMessage}}</span>\n              </div>\n              <div class=\"ui-border\">\n                <span class=\"chat-message-status-time-in-state\" pTooltip=\"{{stateStartDate}}\" tooltipPosition=\"bottom\">{{timeInStateDisplay}}</span>\n              </div>\n            </div>\n           \n          </div>\n\n        </div>\n\n      </div>\n\n      <div [hidden]=\"type==='customer'\" class=\"p-col-fixed ui-border\">\n        <div class=\"chat-message-name\">\n          <div [ngClass]=\"chatMessageNameRightClass\">{{initial}}</div>\n        </div>\n      </div>\n\n    </div>\n\n</div>\n"
        },
        {
            "name": "ChatTaskComponent",
            "id": "component-ChatTaskComponent-805db79555fa0a40857959b59b94d53d",
            "file": "src/stories/chat-task-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat-task",
            "styleUrls": [
                "./chat-task-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat-task-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "duration",
                    "defaultValue": "\"00:00:00\"",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "extend",
                    "defaultValue": "false",
                    "line": 42,
                    "type": "boolean"
                },
                {
                    "name": "extendTimeout",
                    "defaultValue": "15",
                    "line": 45,
                    "type": "number"
                },
                {
                    "name": "message",
                    "defaultValue": "\"\"",
                    "line": 33,
                    "type": "string"
                },
                {
                    "name": "messageCount",
                    "defaultValue": "\"1\"",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "otherParty",
                    "defaultValue": "\"01483000007\"",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "priority",
                    "defaultValue": "\"P1\"",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "priorityColour",
                    "defaultValue": "\"#E02020\"",
                    "description": "<p>control inputs</p>\n",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "state",
                    "defaultValue": "'offered'",
                    "line": 39,
                    "type": "\"offered\" | \"accepted\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "channelIcon",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "extendTimeLeft",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "extendTimeoutTimer",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "statusMsg",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "itemInArray",
                    "args": [
                        {
                            "name": "arr",
                            "type": ""
                        },
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 147,
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135
                },
                {
                    "name": "selectChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, OnChanges, EventEmitter, SimpleChanges, NgZone } from '@angular/core';\nimport { ButtonModule } from 'primeng/button/';\nimport { CardModule } from 'primeng/card';\nimport { MenuItem } from 'primeng/api';\nimport { interval, timer } from 'rxjs';\n\n@Component({\n    selector: 'app-chat-task',\n    templateUrl: './chat-task-component.html',\n    styleUrls: ['./chat-task-component.scss']\n  })\n\nexport class ChatTaskComponent implements OnInit {\n    /**\n     * control inputs\n     */\n    @Input() \n    priorityColour:string = \"#E02020\";\n\n    @Input()\n    priority?: string = \"P1\";\n\n    @Input()\n    messageCount?: string = \"1\";\n\n    @Input()\n    otherParty?: string = \"01483000007\";\n\n    @Input()\n    active?: boolean = false;\n\n    @Input()\n    message?: string = \"\";\n\n    @Input()\n    duration?: string = \"00:00:00\";\n\n    @Input()\n    state : 'offered' | 'accepted' = 'offered';\n\n    @Input()\n    extend: boolean = false;\n    \n    @Input()\n    extendTimeout: number = 15;\n\n    @Output()\n    onClick = new EventEmitter<any>();\n    onSelect = new EventEmitter<boolean>();\n\n    statusMsg: string = \"\";\n    selected: boolean = false;\n    channelIcon: string = \"\";\n    extendTimeoutTimer: any = null;\n    extendTimeLeft: number;\n\n    constructor(private ngZone: NgZone) {\n    }\n\n    //\n    // function   : chat tile selection change\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //    \n    selectChange() {\n      this.selected = !this.selected;\n      this.onSelect.emit(this.selected);\n    }\n\n    //\n    // function   : monitor for property changes\n    //\n    // parameters : changes - property change object\n    //\n    // returns    : none.\n    //    \n    ngOnChanges (changes: SimpleChanges) {\n      for (const propName in changes) {\n        switch (propName) {\n          case \"extendTimeout\":\n            this.extendTimeLeft = changes[propName].currentValue || 15;\n            break;\n\n          case \"extend\":\n            if (changes[propName].currentValue===true) {\n              //make sure time runs inside zone so angular \n              //angular change detection works and the UI is refreshed\n              this.ngZone.run(()=> {\n                this.extendTimeoutTimer = setInterval(() => {   \n                  this.extendTimeLeft = this.extendTimeLeft - 1;\n                  if (this.extendTimeLeft===0) {\n                    clearInterval(this.extendTimeoutTimer);\n                    this.extendTimeoutTimer = null;\n                  } \n                }, 1000);\n              })\n\n            } else {\n              if (this.extendTimeoutTimer) {\n                clearInterval(this.extendTimeoutTimer);\n                this.extendTimeLeft = this.extendTimeout;\n              }\n            }\n            break;\n\n          case \"channel\":\n            switch (changes[propName].currentValue) {\n              case \"facebook\":\n                this.channelIcon = \"icon-Facebook\";\n                break;\n              case \"livechat\":\n                this.channelIcon = \"icon-LiveChat\";                \n                break;\n              case \"twitter\":\n                this.channelIcon = \"icon-Twitter\";                \n                break;\n              case \"whatsapp\":\n                this.channelIcon = \"icon-Whatsapp\";                \n                break;\n            }\n            break;\n        }\n      }\n    }\n\n    //\n    // function   : component initialisation event handler\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //    \n    ngOnInit() {\n\n    }\n\n    //\n    // function   : is string contained in array\n    //\n    // parameters : arr  - arr to search\n    //              item - string item to search for\n    //\n    // returns    : none.\n    //\n    itemInArray(arr, item) {\n      var i;\n      for (i=0; i < arr.length; i++) {\n        if (item===arr[i]) {\n          return (true);\n        }\n      }\n      return (false);\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".chat-task-message {\r\n    margin-left: 34px;\r\n    margin-top:6px;\r\n    height: 32px;\r\n\r\n    &-text {\r\n        padding-right: 10px;        \r\n    }\r\n}\r\n\r\n.chat-task-class-name {\r\n    font-size: 12px;\r\n    color: #949CAD;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 2; /* number of lines to show */\r\n    -webkit-box-orient: vertical;    \r\n}\r\n\r\n.chat-task-duration {\r\n    font-size: 12px;\r\n    color:#56627C;\r\n    margin-right:16px;\r\n}\r\n\r\n.chat-task-channel {\r\n    width: 35px;\r\n\r\n    &-icon {\r\n        font-size: 24px;\r\n        color: #217EB7;\r\n    }\r\n}\r\n\r\n.chat-task-party {\r\n    font-size: 14px;\r\n    color: #56627C;\r\n    font-weight: 600;\r\n    display: block;\r\n    width: 179px;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;      \r\n}\r\n\r\n.chat-task-flag {\r\n    text-align:right; \r\n    width:33px;\r\n    height: 26px;\r\n    padding-top: 4px;  \r\n    \r\n    &-text {\r\n        width: 21px;\r\n        height: 17px;\r\n        border-radius: 2px;\r\n        font-size: 10px;\r\n        line-height: 17px; \r\n        color: #FFFFFF;  \r\n        text-align: center;\r\n        float: right;\r\n    }\r\n}\r\n\r\n.chat-task-status {\r\n    font-size: 12px;\r\n    line-height: 16px;\r\n    color: #56627C;\r\n}\r\n\r\n.chat-task-button-accept {\r\n    cursor:pointer;\r\n    height: 24px;\r\n    width: 24px; \r\n    line-height: 24px; \r\n    border-radius: 12px;\r\n    background-color: #3EC154; \r\n    color: #ffffff;\r\n}\r\n\r\n.chat-task-message-count {\r\n    height: 16px;\r\n    width: 16px; \r\n    line-height: 16px; \r\n    border-radius: 8px;\r\n    background-color: #FA9397; \r\n    color: #ffffff;\r\n    font-size: 10px;\r\n    margin-right:8px;\r\n}\r\n\r\n.chat-task-extend {\r\n    height: 118px;\r\n    margin-top: 6px;\r\n    background-color: #F6F6F6;\r\n    border-top: 1px solid #DBDBDB;\r\n    font-family: IBM Plex Sans;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n\r\n    &-text {\r\n        height: 36px;\r\n        width: 195px;\r\n        margin-top: 16px;\r\n        font-size: 14px;\r\n        line-height: 18px;\r\n        text-align: center;    \r\n        color: #56627C;        \r\n    }\r\n\r\n    &-button {\r\n        background: #FCFCFC;\r\n        border: 1px solid #03A9F4;\r\n        box-sizing: border-box;\r\n        border-radius: 2px;\r\n        width: 76px;\r\n        height: 26px;\r\n        margin-top: 16px;\r\n        text-align: center;\r\n        cursor: pointer;\r\n    }\r\n\r\n    &-button-text {\r\n        font-size: 14px;\r\n        line-height: 24px;\r\n        color: #03A9F4;    \r\n    }\r\n\r\n    &-tile {\r\n        height: 198px;\r\n    }\r\n}\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}",
                    "styleUrl": "./chat-task-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngZone",
                        "type": "NgZone"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"my-task\" [ngClass]=\"{ 'my-task-active' : active, 'chat-task-extend-tile' : extend }\">\n  <div class=\"chat-task-content my-task-chat\">\n\n      <div class=\"p-d-flex p-jc-between\">\n          <div class=\"p-d-flex\">\n             <div class=\"p-as-center ui-border chat-task-channel\">\n                 <input type=\"checkbox\" (change)=\"selectChange();\" >\n             </div>\n\n              <div class=\"p-as-center ui-border chat-task-channel\">\n                  <span class=\"chat-task-channel-icon\"><div [ngClass]=\"channelIcon\"></div></span>\n              </div>\n              <div class=\"p-as-center ui-border\">\n                  <span class=\"chat-task-party\">{{otherParty}}</span> \n              </div>\n          </div>\n          <div class=\"p-d-flex\">\n\n              <div [hidden]=\"state!=='offered'\" class=\"p-as-center ui-border\" style=\"text-align: center;\" >\n                  <div (click)=\"onClick.emit({ 'id': 'toolAnswer'})\" class=\"chat-task-button-accept icon-Tick\"></div>                    \n              </div>\n              <div class=\"p-as-center ui-border chat-task-flag\">\n                  <div [hidden]=\"priority===''\" class=\"chat-task-flag-text\" [ngStyle]=\"{'background-color' : priorityColour }\">{{priority}}</div>\n              </div> \n          </div>\n  \n      </div>  \n\n      <div class=\"p-d-flex p-jc-between chat-task-message ui-border\">\n          \n          <div class=\"p-d-flex chat-task-message-text\">\n              <div class=\"p-as-center ui-border\">\n                  <span class=\"chat-task-class-name\">\n                      <span>{{message}}</span>\n                  </span>\n              </div>\n          </div>\n\n          <div class=\"p-d-flex\">\n              <div [hidden]=\"messageCount===''\" class=\"p-as-center ui-border\" style=\"text-align: center;\" >\n                  <div class=\"chat-task-message-count\">{{messageCount}}</div>                    \n              </div>\n\n              <div [hidden]=\"duration===''\" class=\"p-as-center ui-border\" style=\"text-align: right;\">\n                  <span class=\"chat-task-duration\">{{duration}}</span>\n              </div>\n          </div>\n      </div> \n\n  </div>\n\n  <div *ngIf=\"extend\" class=\"chat-task-extend ui-border\">\n    <div class=\"p-d-flex p-jc-center\">\n        <div class=\"ui-border chat-task-extend-text\" >\n            <div style=\"text-align: center;\">This chat will be automatically put on hold in {{extendTimeLeft}} sec</div>\n        </div>\n    </div>\n    <div class=\"p-d-flex p-jc-center\">\n        <div (click)=\"onClick.emit({ 'id': 'toolExtendChat'})\" class=\"ui-border chat-task-extend-button\" >\n            <span class=\"ui-border chat-task-extend-button-text\">Extend</span>\n        </div>      \n    </div> \n  </div>\n\n</div>\n"
        },
        {
            "name": "ImageViewerComponent",
            "id": "component-ImageViewerComponent-0b6035250964aa31351c5ccbb482ec61",
            "file": "backup/image-viewer-component - Copy.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-viewer",
            "styleUrls": [
                "./image-viewer-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-viewer-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonsColor",
                    "defaultValue": "'white'",
                    "line": 136
                },
                {
                    "name": "buttonsHover",
                    "defaultValue": "'#333333'",
                    "line": 137
                },
                {
                    "name": "defaultDownloadName",
                    "defaultValue": "'Image'",
                    "line": 138
                },
                {
                    "name": "download",
                    "defaultValue": "true",
                    "line": 126
                },
                {
                    "name": "downloadTooltipLabel",
                    "defaultValue": "'Download'",
                    "line": 145
                },
                {
                    "name": "enableTooltip",
                    "defaultValue": "true",
                    "line": 148
                },
                {
                    "name": "fullscreen",
                    "defaultValue": "true",
                    "line": 127
                },
                {
                    "name": "fullscreenTooltipLabel",
                    "defaultValue": "'Fullscreen'",
                    "line": 142
                },
                {
                    "name": "idContainer",
                    "defaultValue": "\"\"",
                    "line": 123
                },
                {
                    "name": "images",
                    "line": 124,
                    "type": "any[]"
                },
                {
                    "name": "loadOnInit",
                    "defaultValue": "false",
                    "line": 129
                },
                {
                    "name": "openInNewTabTooltipLabel",
                    "defaultValue": "'Open in new tab'",
                    "line": 147
                },
                {
                    "name": "primaryColor",
                    "defaultValue": "'#0176bd'",
                    "line": 135
                },
                {
                    "name": "resetZoom",
                    "defaultValue": "true",
                    "line": 128
                },
                {
                    "name": "resetZoomTooltipLabel",
                    "defaultValue": "'Reset zoom'",
                    "line": 141
                },
                {
                    "name": "rotate",
                    "defaultValue": "true",
                    "line": 125
                },
                {
                    "name": "rotateLeftTooltipLabel",
                    "defaultValue": "'Rotate left'",
                    "line": 140
                },
                {
                    "name": "rotateRightTooltipLabel",
                    "defaultValue": "'Rotate right'",
                    "line": 139
                },
                {
                    "name": "showOptions",
                    "defaultValue": "true",
                    "line": 130
                },
                {
                    "name": "showPDFOnlyLabel",
                    "defaultValue": "'Show only PDF'",
                    "line": 146
                },
                {
                    "name": "showPDFOnlyOption",
                    "defaultValue": "true",
                    "line": 134
                },
                {
                    "name": "zoomInButton",
                    "defaultValue": "true",
                    "line": 131
                },
                {
                    "name": "zoomInTooltipLabel",
                    "defaultValue": "'Zoom In'",
                    "line": 143
                },
                {
                    "name": "zoomOutButton",
                    "defaultValue": "true",
                    "line": 132
                },
                {
                    "name": "zoomOutTooltipLabel",
                    "defaultValue": "'Zoom Out'",
                    "line": 144
                }
            ],
            "outputsClass": [
                {
                    "name": "onNext",
                    "defaultValue": "new EventEmitter()",
                    "line": 150,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPrevious",
                    "defaultValue": "new EventEmitter()",
                    "line": 151,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_activeIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 180
                },
                {
                    "name": "BASE_64_IMAGE",
                    "defaultValue": "'data:image/png;base64,'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "BASE_64_PNG",
                    "defaultValue": "`${this.BASE_64_IMAGE} `",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "curSpan",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 155
                },
                {
                    "name": "images1",
                    "defaultValue": "[\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1025/4951/3301\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1025/160/120\",\n            \"alt\": \"Description for Image 1\",\n            \"title\": \"Title 1\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1024/1920/1280\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1024/160/120\",\n            \"alt\": \"Description for Image 2\",\n            \"title\": \"Title 2\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1020/4288/2848\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1020/160/120\",\n            \"alt\": \"Description for Image 3\",\n            \"title\": \"Title 3\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1018/3914/2935\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1018/160/120\",\n            \"alt\": \"Description for Image 4\",\n            \"title\": \"Title 4\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1021/2048/1206\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1021/160/120\",\n            \"alt\": \"Description for Image 5\",\n            \"title\": \"Title 5\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/102/4320/3240\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/102/160/120\",\n            \"alt\": \"Description for Image 6\",\n            \"title\": \"Title 6\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1005/5760/3840\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1005/160/120\",\n            \"alt\": \"Description for Image 7\",\n            \"title\": \"Title 7\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1012/3973/2639\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1012/160/120\",\n            \"alt\": \"Description for Image 8\",\n            \"title\": \"Title 8\"\n        }        \n    ]",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "indexImagemAtual",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "isImagemVertical",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 161
                },
                {
                    "name": "responsiveOptions",
                    "defaultValue": "[\n        {\n            breakpoint: '1024px',\n            numVisible: 5\n        },\n        {\n            breakpoint: '960px',\n            numVisible: 4\n        },\n        {\n            breakpoint: '768px',\n            numVisible: 3\n        },\n        {\n            breakpoint: '560px',\n            numVisible: 1\n        }\n    ]",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "responsiveOptions2",
                    "defaultValue": "[\n        {\n            breakpoint: '1500px',\n            numVisible: 5\n        },\n        {\n            breakpoint: '1024px',\n            numVisible: 3\n        },\n        {\n            breakpoint: '768px',\n            numVisible: 2\n        },\n        {\n            breakpoint: '560px',\n            numVisible: 1\n        }\n    ]",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "ROTACAO_PADRAO_GRAUS",
                    "defaultValue": "90",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "rotacaoImagemAtual",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 159
                },
                {
                    "name": "showOnlyPDF",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "stringDownloadImagem",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "totalImagens",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "viewer",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 153
                },
                {
                    "name": "viewerFullscreen",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 156
                },
                {
                    "name": "wrapper",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 154
                },
                {
                    "name": "zoomPercent",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 164
                }
            ],
            "methodsClass": [
                {
                    "name": "adicionarAnimacao",
                    "args": [
                        {
                            "name": "componente",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 508,
                    "jsdoctags": [
                        {
                            "name": "componente",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "adicionarRotacao",
                    "args": [
                        {
                            "name": "componente",
                            "type": "string"
                        },
                        {
                            "name": "novaRotacao",
                            "type": "string"
                        },
                        {
                            "name": "scale",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 504,
                    "jsdoctags": [
                        {
                            "name": "componente",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "novaRotacao",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scale",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "atualizarCorHoverIn",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 576,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "atualizarCorHoverOut",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 581,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "atualizarRotacao",
                    "args": [
                        {
                            "name": "isAnimacao",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 447,
                    "jsdoctags": [
                        {
                            "name": "isAnimacao",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "base64ToArrayBuffer",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 549,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "buttonsColorChange",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "carregarImagem",
                    "args": [
                        {
                            "name": "novaRotacao",
                            "type": "string"
                        },
                        {
                            "name": "scale",
                            "type": "string"
                        },
                        {
                            "name": "isAnimacao",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 485,
                    "jsdoctags": [
                        {
                            "name": "novaRotacao",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scale",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAnimacao",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "carregarViewerPDF",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 320
                },
                {
                    "name": "converterPDFBase64ParaBlob",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 531
                },
                {
                    "name": "defaultDownloadNameChange",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "esconderBotoesImageViewer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 348
                },
                {
                    "name": "getIdIframe",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 586
                },
                {
                    "name": "getImagemAtual",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 545,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getScale",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 456
                },
                {
                    "name": "getTamanhoIframe",
                    "args": [],
                    "optional": false,
                    "returnType": "{ widthIframe: any; heightIframe: any; }",
                    "typeParameters": [],
                    "line": 339
                },
                {
                    "name": "imagemAnterior",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 404,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "imagesChange",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 265,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "inicializarCores",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "inicializarImageViewer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 279
                },
                {
                    "name": "injetarIframe",
                    "args": [
                        {
                            "name": "widthIframe",
                            "type": "number"
                        },
                        {
                            "name": "heightIframe",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 326,
                    "jsdoctags": [
                        {
                            "name": "widthIframe",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "heightIframe",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isImagemSobrepondoNaVertical",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 476
                },
                {
                    "name": "isImagensPresentes",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 274
                },
                {
                    "name": "isPDF",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 353
                },
                {
                    "name": "isURlImagem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 357
                },
                {
                    "name": "limparCacheElementos",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366
                },
                {
                    "name": "mostrarFullscreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 512
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190
                },
                {
                    "name": "prepararTrocaImagem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 361
                },
                {
                    "name": "prev",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186
                },
                {
                    "name": "primaryColorChange",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "proximaImagem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 389,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetarZoom",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 437
                },
                {
                    "name": "retirarAnimacao",
                    "args": [
                        {
                            "name": "componente",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 500,
                    "jsdoctags": [
                        {
                            "name": "componente",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rotacionarDireita",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 419
                },
                {
                    "name": "rotacionarEsquerda",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 428
                },
                {
                    "name": "setStyleClass",
                    "args": [
                        {
                            "name": "nomeClasse",
                            "type": "string"
                        },
                        {
                            "name": "nomeStyle",
                            "type": "string"
                        },
                        {
                            "name": "cor",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 565,
                    "jsdoctags": [
                        {
                            "name": "nomeClasse",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nomeStyle",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cor",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300
                },
                {
                    "name": "showPDFOnly",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 560
                },
                {
                    "name": "zoomIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219
                },
                {
                    "name": "zoomOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  Renderer2,\n  SimpleChanges\n} from '@angular/core';\n\nimport ImageViewer from 'iv-viewer';\nimport {FullScreenViewer} from 'iv-viewer';\n\n/**\n* @author Breno Prata - 22/12/2017\n*/\n@Component({\n\n  selector: 'app-image-viewer',\n\n  templateUrl: './image-viewer-component.html',\n\n  styleUrls: ['./image-viewer-component.scss']\n})\nexport class ImageViewerComponent implements OnChanges, OnInit, AfterViewInit {\n\n    responsiveOptions:any[] = [\n        {\n            breakpoint: '1024px',\n            numVisible: 5\n        },\n        {\n            breakpoint: '960px',\n            numVisible: 4\n        },\n        {\n            breakpoint: '768px',\n            numVisible: 3\n        },\n        {\n            breakpoint: '560px',\n            numVisible: 1\n        }\n    ];\n\n\n    images1: any[] = [\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1025/4951/3301\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1025/160/120\",\n            \"alt\": \"Description for Image 1\",\n            \"title\": \"Title 1\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1024/1920/1280\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1024/160/120\",\n            \"alt\": \"Description for Image 2\",\n            \"title\": \"Title 2\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1020/4288/2848\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1020/160/120\",\n            \"alt\": \"Description for Image 3\",\n            \"title\": \"Title 3\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1018/3914/2935\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1018/160/120\",\n            \"alt\": \"Description for Image 4\",\n            \"title\": \"Title 4\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1021/2048/1206\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1021/160/120\",\n            \"alt\": \"Description for Image 5\",\n            \"title\": \"Title 5\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/102/4320/3240\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/102/160/120\",\n            \"alt\": \"Description for Image 6\",\n            \"title\": \"Title 6\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1005/5760/3840\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1005/160/120\",\n            \"alt\": \"Description for Image 7\",\n            \"title\": \"Title 7\"\n        },\n        {\n            \"previewImageSrc\": \"https://picsum.photos/id/1012/3973/2639\",\n            \"thumbnailImageSrc\": \"https://picsum.photos/id/1012/160/120\",\n            \"alt\": \"Description for Image 8\",\n            \"title\": \"Title 8\"\n        }        \n    ]\n\n    responsiveOptions2:any[] = [\n        {\n            breakpoint: '1500px',\n            numVisible: 5\n        },\n        {\n            breakpoint: '1024px',\n            numVisible: 3\n        },\n        {\n            breakpoint: '768px',\n            numVisible: 2\n        },\n        {\n            breakpoint: '560px',\n            numVisible: 1\n        }\n    ];\n\n  BASE_64_IMAGE = 'data:image/png;base64,';\n  BASE_64_PNG = `${this.BASE_64_IMAGE} `;\n  ROTACAO_PADRAO_GRAUS = 90;\n\n  @Input() idContainer = \"\";\n  @Input() images: any[];\n  @Input() rotate = true;\n  @Input() download = true;\n  @Input() fullscreen = true;\n  @Input() resetZoom = true;\n  @Input() loadOnInit = false;\n  @Input() showOptions = true;\n  @Input() zoomInButton = true;\n  @Input() zoomOutButton = true;\n\n  @Input() showPDFOnlyOption = true;\n  @Input() primaryColor = '#0176bd';\n  @Input() buttonsColor = 'white';\n  @Input() buttonsHover = '#333333';\n  @Input() defaultDownloadName = 'Image';\n  @Input() rotateRightTooltipLabel = 'Rotate right';\n  @Input() rotateLeftTooltipLabel = 'Rotate left';\n  @Input() resetZoomTooltipLabel = 'Reset zoom';\n  @Input() fullscreenTooltipLabel = 'Fullscreen';\n  @Input() zoomInTooltipLabel = 'Zoom In';\n  @Input() zoomOutTooltipLabel = 'Zoom Out';\n  @Input() downloadTooltipLabel = 'Download';\n  @Input() showPDFOnlyLabel = 'Show only PDF';\n  @Input() openInNewTabTooltipLabel = 'Open in new tab';\n  @Input() enableTooltip = true;\n\n  @Output() onNext = new EventEmitter();\n  @Output() onPrevious = new EventEmitter();\n\n  viewer;\n  wrapper;\n  curSpan;\n  viewerFullscreen;\n  totalImagens: number;\n  indexImagemAtual: number;\n  rotacaoImagemAtual: number;\n  stringDownloadImagem: string;\n  isImagemVertical: boolean;\n  showOnlyPDF = false;\n\n  zoomPercent = 100;\n\n  constructor(private renderer: Renderer2) {}\n\n\n  get activeIndex(): number {\n    return this._activeIndex;\n}\n\nset activeIndex(newValue) {\n    if (this.images1 && 0 <= newValue && newValue <= (this.images1.length - 1)) {\n        this._activeIndex = newValue;\n        this.proximaImagem(this._activeIndex);\n    }\n}\n\n_activeIndex: number = 0;\n\nnext() {\n    this.activeIndex++;\n}\n\nprev() {\n    this.activeIndex--;\n}\n\n  ngOnInit() {\n      if (this.loadOnInit) {\n          this.isImagensPresentes();\n      }\n  }\n\n  ngAfterViewInit() {\n      this.inicializarCores();\n      if (this.loadOnInit) {\n          this.inicializarImageViewer();\n          setTimeout(() => {\n              this.showImage();\n          }, 1000);\n      }\n  }\n\n  private inicializarCores() {\n      this.setStyleClass('inline-icon', 'background-color', this.primaryColor);\n      this.setStyleClass('footer-info', 'background-color', this.primaryColor);\n      this.setStyleClass('footer-icon', 'color', this.buttonsColor);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n      this.imagesChange(changes);\n      this.primaryColorChange(changes);\n      this.buttonsColorChange(changes);\n      this.defaultDownloadNameChange(changes);\n  }\n\n  zoomIn() {\n      this.zoomPercent += 10;\n      this.viewer.zoom(this.zoomPercent);\n  }\n\n  zoomOut() {\n      if (this.zoomPercent === 100) {\n\n          return;\n      }\n\n      this.zoomPercent -= 10;\n\n      if (this.zoomPercent < 0) {\n\n          this.zoomPercent = 0;\n      }\n\n      this.viewer.zoom(this.zoomPercent);\n  }\n\n  primaryColorChange(changes: SimpleChanges) {\n      if (changes['primaryColor'] || changes['showOptions']) {\n          setTimeout(() => {\n              this.setStyleClass('inline-icon', 'background-color', this.primaryColor);\n              this.setStyleClass('footer-info', 'background-color', this.primaryColor);\n          }, 350);\n      }\n  }\n\n  buttonsColorChange(changes: SimpleChanges) {\n      if (changes['buttonsColor'] || changes['rotate'] || changes['download']\n      || changes['fullscreen']) {\n          setTimeout(() => {\n\n              this.setStyleClass('footer-icon', 'color', this.buttonsColor);\n          }, 350);\n      }\n  }\n\n  defaultDownloadNameChange(changes: SimpleChanges) {\n      if (changes['defaultDownloadName']) {\n          this.defaultDownloadName = this.defaultDownloadName;\n      }\n  }\n\n  imagesChange(changes: SimpleChanges) {\n      if (changes['images'] && this.isImagensPresentes()) {\n          this.inicializarImageViewer();\n          setTimeout(() => {\n              this.showImage();\n          }, 1000);\n      }\n  }\n\n  isImagensPresentes() {\n      return this.images1\n          && this.images1.length > 0;\n  }\n\n  inicializarImageViewer() {\n\n      this.indexImagemAtual = 0;\n      this.rotacaoImagemAtual = 0;\n      this.totalImagens = this.images1.length;\n\n      if (this.viewer) {\n\n          this.wrapper.querySelector('.total').innerHTML = this.totalImagens;\n          return;\n      }\n\n      this.wrapper = document.getElementById(`${this.idContainer}`);\n\n      if (this.wrapper) {\n          this.curSpan = this.wrapper.querySelector('#current');\n          this.viewer = new ImageViewer(this.wrapper.querySelector('.image-container'));\n //         this.wrapper.querySelector('.total').innerHTML = this.totalImagens;\n      }\n  }\n\n  showImage() {\n      this.prepararTrocaImagem();\n\n      let imgObj = this.BASE_64_PNG;\n      if (this.isPDF()) {\n\n          this.carregarViewerPDF();\n      } else if (this.isURlImagem()) {\n\n          imgObj = this.getImagemAtual();\n          this.stringDownloadImagem = this.getImagemAtual();\n      } else {\n          imgObj = this.BASE_64_PNG + this.getImagemAtual();\n          this.stringDownloadImagem = this.BASE_64_IMAGE + this.getImagemAtual();\n      }\n      this.viewer.load(imgObj, imgObj);\n      //this.curSpan.innerHTML = this.indexImagemAtual;\n      this.inicializarCores();\n  }\n\n  carregarViewerPDF() {\n      this.esconderBotoesImageViewer();\n      const {widthIframe, heightIframe} = this.getTamanhoIframe();\n      this.injetarIframe(widthIframe, heightIframe);\n  }\n\n  injetarIframe(widthIframe: number, heightIframe: number) {\n      const ivImageWrap = document.getElementById(this.idContainer).getElementsByClassName('iv-image-wrap').item(0);\n\n      const iframe = document.createElement('iframe');\n\n      iframe.id = this.getIdIframe();\n      iframe.style.width = `${widthIframe}px`;\n      iframe.style.height = `${heightIframe}px`;\n      iframe.src = `${this.converterPDFBase64ParaBlob()}`;\n\n      this.renderer.appendChild(ivImageWrap, iframe);\n  }\n\n  getTamanhoIframe() {\n\n      const container = document.getElementById(this.idContainer);\n\n      const widthIframe = container.offsetWidth;\n      const heightIframe = container.offsetHeight;\n      return {widthIframe, heightIframe};\n  }\n\n  esconderBotoesImageViewer() {\n      this.setStyleClass('iv-loader', 'visibility', 'hidden');\n      this.setStyleClass('options-image-viewer', 'visibility', 'hidden');\n  }\n\n  isPDF() {\n      return this.getImagemAtual().startsWith('JVBE') || this.getImagemAtual().startsWith('0M8R');\n  }\n\n  isURlImagem() {\n      return this.getImagemAtual().match(new RegExp(/^(https|http|www\\.)/g));\n  }\n\n  prepararTrocaImagem() {\n      this.rotacaoImagemAtual = 0;\n      this.limparCacheElementos();\n  }\n\n  limparCacheElementos() {\n\n      const container = document.getElementById(this.idContainer);\n      const iframeElement = document.getElementById(this.getIdIframe());\n      const ivLargeImage = document.getElementById(this.idContainer).getElementsByClassName('iv-large-image').item(0);\n\n      if (iframeElement) {\n\n          this.renderer.removeChild(container, iframeElement);\n\n          if (ivLargeImage) {\n\n              this.renderer.removeChild(container, ivLargeImage);\n          }\n      }\n\n      if (iframeElement) {\n      }\n\n      this.setStyleClass('iv-loader', 'visibility', 'auto');\n      this.setStyleClass('options-image-viewer', 'visibility', 'inherit');\n  }\n\n  proximaImagem(index:number) {\n      this.isImagemVertical = false;\n      //this.indexImagemAtual++;\n      this.indexImagemAtual=index;\n      if (this.indexImagemAtual > this.totalImagens) {\n          this.indexImagemAtual = 1;\n      }\n      this.onNext.emit(this.indexImagemAtual);\n      if (!this.isPDF() && this.showOnlyPDF) {\n          this.proximaImagem(index);\n          return;\n      }\n      this.showImage();\n  }\n\n  imagemAnterior(index:number) {\n      this.isImagemVertical = false;\n      //this.indexImagemAtual--;\n      this.indexImagemAtual--;      \n      if (this.indexImagemAtual <= 0) {\n          this.indexImagemAtual = this.totalImagens;\n      }\n      this.onPrevious.emit(this.indexImagemAtual);\n      if (!this.isPDF() && this.showOnlyPDF) {\n          this.imagemAnterior(index);\n          return;\n      }\n      this.showImage();\n  }\n\n  rotacionarDireita() {\n      const timeout = this.resetarZoom();\n      setTimeout(() => {\n          this.rotacaoImagemAtual += this.ROTACAO_PADRAO_GRAUS;\n          this.isImagemVertical = !this.isImagemVertical;\n          this.atualizarRotacao();\n      }, timeout);\n  }\n\n  rotacionarEsquerda() {\n      const timeout = this.resetarZoom();\n      setTimeout(() => {\n          this.rotacaoImagemAtual -= this.ROTACAO_PADRAO_GRAUS;\n          this.isImagemVertical = !this.isImagemVertical;\n          this.atualizarRotacao();\n      }, timeout);\n  }\n\n  resetarZoom(): number {\n      this.zoomPercent = 100;\n      this.viewer.zoom(this.zoomPercent);\n      let timeout = 800;\n      if (this.viewer._state.zoomValue === this.zoomPercent) {\n          timeout = 0;\n      }\n      return timeout;\n  }\n\n  atualizarRotacao(isAnimacao = true) {\n      let scale = '';\n      if (this.isImagemVertical && this.isImagemSobrepondoNaVertical()) {\n          scale = `scale(${this.getScale()})`;\n      }\n      const novaRotacao = `rotate(${this.rotacaoImagemAtual}deg)`;\n      this.carregarImagem(novaRotacao, scale, isAnimacao);\n  }\n\n  getScale() {\n\n      const containerElement = document.getElementById(this.idContainer);\n      const ivLargeImageElement = document.getElementById(this.idContainer).getElementsByClassName('iv-large-image').item(0);\n      const diferencaTamanhoImagem = ivLargeImageElement.clientWidth - containerElement.clientHeight;\n\n      if (diferencaTamanhoImagem >= 250 && diferencaTamanhoImagem < 300) {\n\n          return (ivLargeImageElement.clientWidth - containerElement.clientHeight) / (containerElement.clientHeight) - 0.1;\n      } else if (diferencaTamanhoImagem >= 300 && diferencaTamanhoImagem < 400) {\n\n          return ((ivLargeImageElement.clientWidth - containerElement.clientHeight) / (containerElement.clientHeight)) - 0.15;\n      } else if (diferencaTamanhoImagem >= 400) {\n\n          return ((ivLargeImageElement.clientWidth - containerElement.clientHeight) / (containerElement.clientHeight)) - 0.32;\n      }\n\n      return 0.6;\n  }\n\n  isImagemSobrepondoNaVertical() {\n\n      const margemErro = 5;\n      const containerElement: Element = document.getElementById(this.idContainer);\n      const ivLargeImageElement: Element = document.getElementById(this.idContainer).getElementsByClassName('iv-large-image').item(0);\n\n      return containerElement.clientHeight < ivLargeImageElement.clientWidth + margemErro;\n  }\n\n  carregarImagem(novaRotacao: string, scale: string, isAnimacao = true) {\n      if (isAnimacao) {\n          this.adicionarAnimacao('iv-snap-image');\n          this.adicionarAnimacao('iv-large-image');\n      }\n      this.adicionarRotacao('iv-snap-image', novaRotacao, scale);\n      this.adicionarRotacao('iv-large-image', novaRotacao, scale);\n      setTimeout(() => {\n          if (isAnimacao) {\n              this.retirarAnimacao('iv-snap-image');\n              this.retirarAnimacao('iv-large-image');\n          }\n      }, 501);\n  }\n\n  retirarAnimacao(componente: string) {\n      this.setStyleClass(componente, 'transition', 'auto');\n  }\n\n  adicionarRotacao(componente: string, novaRotacao: string, scale: string) {\n      this.setStyleClass(componente, 'transform', `${novaRotacao} ${scale}`);\n  }\n\n  adicionarAnimacao(componente: string) {\n      this.setStyleClass(componente, 'transition', `0.5s linear`);\n  }\n\n  mostrarFullscreen() {\n      const timeout = this.resetarZoom();\n      setTimeout(() => {\n\n          this.viewerFullscreen = new FullScreenViewer();\n          let imgSrc;\n\n          if (this.isURlImagem()) {\n\n              imgSrc = this.getImagemAtual();\n          } else {\n\n              imgSrc = this.BASE_64_PNG + this.getImagemAtual();\n          }\n          this.viewerFullscreen.show(imgSrc, imgSrc);\n          this.atualizarRotacao(false);\n      }, timeout);\n  }\n\n  converterPDFBase64ParaBlob() {\n\n      const arrBuffer = this.base64ToArrayBuffer(this.getImagemAtual());\n\n      const newBlob = new Blob([arrBuffer], { type: 'application/pdf' });\n\n      if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n          window.navigator.msSaveOrOpenBlob(newBlob);\n          return;\n      }\n\n      return window.URL.createObjectURL(newBlob);\n  }\n\n  private getImagemAtual() {\n      return this.images1[this.indexImagemAtual].previewImageSrc;\n  }\n\n  base64ToArrayBuffer(data) {\n      const binaryString = window.atob(data);\n      const binaryLen = binaryString.length;\n      const bytes = new Uint8Array(binaryLen);\n      for (let i = 0; i < binaryLen; i++) {\n          const ascii = binaryString.charCodeAt(i);\n          bytes[i] = ascii;\n      }\n      return bytes;\n  }\n\n  showPDFOnly() {\n      this.showOnlyPDF = !this.showOnlyPDF;\n      //this.proximaImagem();\n  }\n\n  setStyleClass(nomeClasse: string, nomeStyle: string, cor: string) {\n\n      let cont;\n      const listaElementos = document.getElementById(this.idContainer).getElementsByClassName(nomeClasse);\n\n      for (cont = 0; cont < listaElementos.length; cont++) {\n\n          this.renderer.setStyle(listaElementos.item(cont), nomeStyle, cor);\n      }\n  }\n\n  atualizarCorHoverIn(event: MouseEvent) {\n\n      this.renderer.setStyle(event.srcElement, 'color', this.buttonsHover);\n  }\n\n  atualizarCorHoverOut(event: MouseEvent) {\n\n      this.renderer.setStyle(event.srcElement, 'color', this.buttonsColor);\n  }\n\n  getIdIframe() {\n      return this.idContainer + '-iframe'\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './assets/mytheme/variables';\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}\r\n\r\n.p-tooltip {\r\n  margin-left: -20px;\r\n\r\n}\r\n\r\n.footer-icon {\r\n    font-size: xx-large;\r\n  }\r\n  \r\n  .image-viewer-tooltip {\r\n    position: relative;\r\n    display: inline-block;\r\n    z-index: 1000;\r\n  }\r\n  \r\n  .image-viewer-tooltip .tooltiptext {\r\n    visibility: hidden;\r\n    width: 120px;\r\n    background-color: #555;\r\n    color: #fff;\r\n    text-align: center;\r\n    border-radius: 6px;\r\n    padding: 5px 0;\r\n    position: absolute;\r\n    z-index: 1;\r\n    bottom: 125%;\r\n    left: 40%;\r\n    margin-left: -60px;\r\n    opacity: 0;\r\n    transition: opacity 0.3s;\r\n  }\r\n  \r\n  .image-viewer-tooltip .tooltiptext::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 100%;\r\n    left: 50%;\r\n    margin-left: -5px;\r\n    border-width: 5px;\r\n    border-style: solid;\r\n    border-color: #555 transparent transparent transparent;\r\n  }\r\n  \r\n  .image-viewer-tooltip:hover .tooltiptext {\r\n    visibility: visible;\r\n    opacity: 1;\r\n  }\r\n\r\n\r\n//********************************\r\n//slider styles\r\n\r\n.thumbnail {\r\n\r\n  border-width: 2px;\r\n  border-color: transparent;\r\n  border-style: solid;\r\n  padding: 2px;  \r\n  margin: 2px;\r\n  cursor: pointer;\r\n  border-radius: 2px;\r\n\r\n  &-image {\r\n    width: 100px;\r\n    height: 100px;\r\n    background-size: cover; \r\n    background-repeat: no-repeat; \r\n    background-position: 50% 50%;\r\n  }\r\n\r\n  &-selected {\r\n    border-color: #ffffff;\r\n  }\r\n}",
                    "styleUrl": "./image-viewer-component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 239,
                    "end": 247,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 239,
                        "end": 240,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 240,
                        "end": 246,
                        "flags": 0,
                        "escapedText": "author"
                    },
                    "comment": "Breno Prata - 22/12/2017"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 164,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "activeIndex": {
                    "name": "activeIndex",
                    "setSignature": {
                        "name": "activeIndex",
                        "type": "void",
                        "args": [
                            {
                                "name": "newValue",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 173,
                        "jsdoctags": [
                            {
                                "name": "newValue",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "activeIndex",
                        "type": "number",
                        "returnType": "number",
                        "line": 169
                    }
                }
            },
            "templateData": "\n<div #mydiv class=\"header\"><div style=\"line-height: 48px;\"></div></div>\n<div id=\"{{idContainer}}\" class=\"image-gallery-2\">\n    <div class=\"image-container\"></div>\n</div>  \n\n\n<app-slider #slider>\n\t<div *ngFor=\"let image of images; let i = index\" [attr.data-index]=\"i\" appSliderItem>\n        <div class=\"thumbnail\">\n            <div class=\"thumbnail-image\" [ngStyle]=\"{'background-image': 'url(' + image.thumbnailImageSrc +')'}\">{{slidesIndex}}</div>\n        </div>            \n    </div>\n</app-slider>\n"
        },
        {
            "name": "ImageViewerComponent",
            "id": "component-ImageViewerComponent-01b466ee8116eb7c3be23891039ed313-1",
            "file": "backup/image-viewer-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-viewer",
            "styleUrls": [
                "./image-viewer-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-viewer-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "idContainer",
                    "defaultValue": "\"\"",
                    "line": 27
                },
                {
                    "name": "images",
                    "line": 28,
                    "type": "any[]"
                },
                {
                    "name": "loadOnInit",
                    "defaultValue": "false",
                    "line": 29
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_activeIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "BASE_64_IMAGE",
                    "defaultValue": "'data:image/png;base64,'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "BASE_64_PNG",
                    "defaultValue": "`${this.BASE_64_IMAGE} `",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "curSpan",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "displayCustom",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "imageRotation",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isImageVertical",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "responsiveOptions",
                    "defaultValue": "[\n        { breakpoint: '1401px', numVisible: 5 },\n        { breakpoint: '800px', numVisible: 4 },        \n        { breakpoint: '500px', numVisible: 3 },\n        { breakpoint: '400px',  numVisible: 2 },\n        { breakpoint: '300px',  numVisible: 1 } \n    ]",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "ROTATE_BY_90_DEGREES",
                    "defaultValue": "90",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "showOnlyPDF",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "totalImages",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "viewer",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "wrapper",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "zoomPercent",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "addAnimation",
                    "args": [
                        {
                            "name": "componente",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 359,
                    "jsdoctags": [
                        {
                            "name": "componente",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addRotation",
                    "args": [
                        {
                            "name": "componente",
                            "type": "string"
                        },
                        {
                            "name": "novaRotacao",
                            "type": "string"
                        },
                        {
                            "name": "scale",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 355,
                    "jsdoctags": [
                        {
                            "name": "componente",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "novaRotacao",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scale",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "base64ToArrayBuffer",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 377,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "converterPDFBase64ParaBlob",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 363
                },
                {
                    "name": "getIdIframe",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 401
                },
                {
                    "name": "getIframeSize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ widthIframe: any; heightIframe: any; }",
                    "typeParameters": [],
                    "line": 220
                },
                {
                    "name": "getImageSrc",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 373,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getScale",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 312
                },
                {
                    "name": "hideImageViewerButtons",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227
                },
                {
                    "name": "initialiseImageViewer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151
                },
                {
                    "name": "injectIframe",
                    "args": [
                        {
                            "name": "widthIframe",
                            "type": "number"
                        },
                        {
                            "name": "heightIframe",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "jsdoctags": [
                        {
                            "name": "widthIframe",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "heightIframe",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isImageOverlappingInVertical",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 328
                },
                {
                    "name": "isImageUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 236
                },
                {
                    "name": "isPDF",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 232
                },
                {
                    "name": "loadPdfViewer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195
                },
                {
                    "name": "nextImage",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 256,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86
                },
                {
                    "name": "previousImage",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 266,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAnimation",
                    "args": [
                        {
                            "name": "componente",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 351,
                    "jsdoctags": [
                        {
                            "name": "componente",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetImageViewer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240
                },
                {
                    "name": "resetZoom",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 293
                },
                {
                    "name": "rotateLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 284
                },
                {
                    "name": "rotateRight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 275
                },
                {
                    "name": "setStyleClass",
                    "args": [
                        {
                            "name": "nomeClasse",
                            "type": "string"
                        },
                        {
                            "name": "nomeStyle",
                            "type": "string"
                        },
                        {
                            "name": "cor",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 393,
                    "jsdoctags": [
                        {
                            "name": "nomeClasse",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nomeStyle",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cor",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172
                },
                {
                    "name": "showPDFOnly",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 388
                },
                {
                    "name": "updateRotation",
                    "args": [
                        {
                            "name": "animate",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 303,
                    "jsdoctags": [
                        {
                            "name": "animate",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadImage",
                    "args": [
                        {
                            "name": "newRotation",
                            "type": "string"
                        },
                        {
                            "name": "scale",
                            "type": "string"
                        },
                        {
                            "name": "animated",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 335,
                    "jsdoctags": [
                        {
                            "name": "newRotation",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scale",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "animated",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "zoomIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121
                },
                {
                    "name": "zoomOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, Input, OnChanges, OnInit, Output, Renderer2, SimpleChanges } from '@angular/core';\nimport ImageViewer from 'iv-viewer';\nimport { SliderComponent } from './slider-component';\n\n@Component({\n  selector: 'app-image-viewer',\n  templateUrl: './image-viewer-component.html',\n  styleUrls: ['./image-viewer-component.scss']\n})\n\nexport class ImageViewerComponent implements OnInit, AfterViewInit {\n\n    responsiveOptions:any[] = [\n        { breakpoint: '1401px', numVisible: 5 },\n        { breakpoint: '800px', numVisible: 4 },        \n        { breakpoint: '500px', numVisible: 3 },\n        { breakpoint: '400px',  numVisible: 2 },\n        { breakpoint: '300px',  numVisible: 1 } \n    ];\n\n    displayCustom: boolean = true;\n    \n    BASE_64_IMAGE = 'data:image/png;base64,';\n    BASE_64_PNG = `${this.BASE_64_IMAGE} `;\n    ROTATE_BY_90_DEGREES = 90;\n\n    @Input() idContainer = \"\";\n    @Input() images: any[];\n    @Input() loadOnInit = false;\n\n    viewer;\n    wrapper;\n    curSpan;\n    totalImages: number;\n    imageRotation: number;\n    isImageVertical: boolean; \n    showOnlyPDF = false;\n    //viewerWidth:string = (window.innerWidth * 0.5).toString() + \"px\";\n    \n    zoomPercent = 100;\n    _activeIndex: number = 0; \n    //\n    // function   : class constructor\n    //\n    // parameters : renderer - custom.alternative DOM renderer\n    //\n    // returns    : none.\n    // \n    constructor(private renderer: Renderer2) {\n    }\n\n    //\n    // function   : thumbnail active index getter, used in combination \n    //              with setter to update image viewer then thumbnail changes\n    //\n    // parameters : none.\n    //\n    // returns    : thumbnail active index\n    // \n    get activeIndex(): number {\n        return this._activeIndex;\n    }\n\n    //\n    // function   : thumbnail active index setter, used to update image\n    //              view with new thumbnail selection\n    //\n    // parameters : newValue - new thumbnail selection index\n    //\n    // returns    : none.\n    // \n    set activeIndex(newValue) {\n        if (this.images && 0 <= newValue && newValue <= (this.images.length - 1)) {\n            this._activeIndex = newValue;\n            this.nextImage(this._activeIndex);\n        }\n    }\n\n    //\n    // function   : class initialised event handler\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    ngOnInit() {\n        /*\n        window.addEventListener('resize', ()=> {\n            if (this.viewerWidth!==(window.innerWidth * 0.5).toString() + \"px\") {\n                this.viewerWidth=(window.innerWidth * 0.5).toString() + \"px\";\n                this.resetZoom();\n            }\n        });\n        */\n    }\n\n    //\n    // function   : called once the view and child views have initialised,\n    //              initialise image viewer\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    ngAfterViewInit() {\n        if (this.loadOnInit) {\n            this.initialiseImageViewer();\n            setTimeout(() => {\n                this.showImage();\n            }, 1000);\n        }\n    }\n\n    //\n    // function   : zoom in image displayed in viewer by 10%\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    zoomIn() {\n        this.zoomPercent += 10;\n        this.viewer.zoom(this.zoomPercent);\n    }\n\n    //\n    // function   : zoom out image displayed in viewer by 10%\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    zoomOut() {\n        if (this.zoomPercent === 100) {\n            return;\n        }\n        this.zoomPercent -= 10;\n        if (this.zoomPercent < 0) {\n            this.zoomPercent = 0;\n        }\n        this.viewer.zoom(this.zoomPercent);\n    }\n\n    //\n    // function   : create image viewer and insert it into DOM\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    // \n    initialiseImageViewer() {\n        this.imageRotation = 0;\n        this.totalImages = this.images.length;\n        //only initilaise viewer once\n        if (!this.viewer) {\n            this.wrapper = document.getElementById(`${this.idContainer}`);\n\n            if (this.wrapper) {\n                this.curSpan = this.wrapper.querySelector('#current');\n                this.viewer = new ImageViewer(this.wrapper.querySelector('.image-container'));\n            }\n        }\n    }\n\n    //\n    // function   : create image viewer and insert it into DOM\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    showImage() {\n        this.resetImageViewer();\n\n        let imgObj = this.BASE_64_PNG;\n        if (this.isPDF()) {\n            this.loadPdfViewer();\n\n        } else if (this.isImageUrl()) {\n            imgObj = this.getImageSrc();\n\n        } else {\n            imgObj = this.BASE_64_PNG + this.getImageSrc();\n        }\n        this.viewer.load(imgObj, imgObj);\n    }\n\n    //\n    // function   : load pdf viewer \n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    loadPdfViewer() {\n        this.hideImageViewerButtons();\n        const {widthIframe, heightIframe} = this.getIframeSize();\n        this.injectIframe(widthIframe, heightIframe);\n    }\n\n    //\n    // function   : create iframe to contain pdf viewer and insert into custom render\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    injectIframe(widthIframe: number, heightIframe: number) {\n        const ivImageWrap = document.getElementById(this.idContainer).getElementsByClassName('iv-image-wrap').item(0);\n        const iframe = document.createElement('iframe');\n\n        iframe.id = this.getIdIframe();\n        iframe.style.width = `${widthIframe}px`;\n        iframe.style.height = `${heightIframe}px`;\n        iframe.src = `${this.converterPDFBase64ParaBlob()}`;\n\n        this.renderer.appendChild(ivImageWrap, iframe);\n    }\n\n    getIframeSize() {\n        const container = document.getElementById(this.idContainer);\n        const widthIframe = container.offsetWidth;\n        const heightIframe = container.offsetHeight;\n        return {widthIframe, heightIframe};\n    }\n\n    hideImageViewerButtons() {\n        this.setStyleClass('iv-loader', 'visibility', 'hidden');\n        this.setStyleClass('options-image-viewer', 'visibility', 'hidden');\n    }\n\n    isPDF() {\n        return this.getImageSrc().startsWith('JVBE') || this.getImageSrc().startsWith('0M8R');\n    }\n\n    isImageUrl() {\n        return this.getImageSrc().match(new RegExp(/^(https|http|www\\.)/g));\n    }\n\n    resetImageViewer() {\n        this.imageRotation = 0;\n        const container = document.getElementById(this.idContainer);\n        const iframeElement = document.getElementById(this.getIdIframe());\n        const ivLargeImage = document.getElementById(this.idContainer).getElementsByClassName('iv-large-image').item(0);\n\n        if (iframeElement) {\n            this.renderer.removeChild(container, iframeElement);\n            if (ivLargeImage) {\n                this.renderer.removeChild(container, ivLargeImage);\n            }\n        }\n        this.setStyleClass('iv-loader', 'visibility', 'auto');\n        this.setStyleClass('options-image-viewer', 'visibility', 'inherit');\n    }\n\n    nextImage(index:number) {\n        //reset image rotation\n        this.isImageVertical = false;\n        if (!this.isPDF() && this.showOnlyPDF) {\n            this.nextImage(index);\n            return;\n        }\n        this.showImage();\n    }\n\n    previousImage(index:number) {\n        this.isImageVertical = false;\n        if (!this.isPDF() && this.showOnlyPDF) {\n            this.previousImage(index);\n            return;\n        }\n        this.showImage();\n    }\n\n    rotateRight() {\n        const timeout = this.resetZoom();\n        setTimeout(() => {\n            this.imageRotation += this.ROTATE_BY_90_DEGREES;\n            this.isImageVertical = !this.isImageVertical;\n            this.updateRotation();\n        }, timeout);\n    }\n\n    rotateLeft() {\n        const timeout = this.resetZoom();\n        setTimeout(() => {\n            this.imageRotation -= this.ROTATE_BY_90_DEGREES;\n            this.isImageVertical = !this.isImageVertical;\n            this.updateRotation();\n        }, timeout);\n    }\n\n    resetZoom(): number {\n        this.zoomPercent = 100;\n        this.viewer.zoom(this.zoomPercent);\n        let timeout = 800;\n        if (this.viewer._state.zoomValue === this.zoomPercent) {\n            timeout = 0;\n        }\n        return timeout;\n    }\n\n    updateRotation(animate = true) {\n        let scale = '';\n        if (this.isImageVertical && this.isImageOverlappingInVertical()) {\n            scale = `scale(${this.getScale()})`;\n        }\n        const newRoation = `rotate(${this.imageRotation}deg)`;\n        this.uploadImage(newRoation, scale, animate);\n    }\n\n    getScale() {\n\n        const containerElement = document.getElementById(this.idContainer);\n        const ivLargeImageElement = document.getElementById(this.idContainer).getElementsByClassName('iv-large-image').item(0);\n        const diferencaTamanhoImagem = ivLargeImageElement.clientWidth - containerElement.clientHeight;\n\n        if (diferencaTamanhoImagem >= 250 && diferencaTamanhoImagem < 300) {\n            return (ivLargeImageElement.clientWidth - containerElement.clientHeight) / (containerElement.clientHeight) - 0.1;\n        } else if (diferencaTamanhoImagem >= 300 && diferencaTamanhoImagem < 400) {\n            return ((ivLargeImageElement.clientWidth - containerElement.clientHeight) / (containerElement.clientHeight)) - 0.15;\n        } else if (diferencaTamanhoImagem >= 400) {\n            return ((ivLargeImageElement.clientWidth - containerElement.clientHeight) / (containerElement.clientHeight)) - 0.32;\n        }\n        return 0.6;\n    }\n\n    isImageOverlappingInVertical() {\n        const marginError = 5;\n        const containerElement: Element = document.getElementById(this.idContainer);\n        const ivLargeImageElement: Element = document.getElementById(this.idContainer).getElementsByClassName('iv-large-image').item(0);\n        return containerElement.clientHeight < ivLargeImageElement.clientWidth + marginError;\n    }\n\n    uploadImage(newRotation: string, scale: string, animated = true) {\n        if (animated) {\n            this.addAnimation('iv-snap-image');\n            this.addAnimation('iv-large-image');\n        }\n        this.addRotation('iv-snap-image', newRotation, scale);\n        this.addRotation('iv-large-image', newRotation, scale);\n\n        setTimeout(() => {\n            if (animated) {\n                this.removeAnimation('iv-snap-image');\n                this.removeAnimation('iv-large-image');\n            }\n        }, 501);\n    }\n\n    removeAnimation(componente: string) {\n        this.setStyleClass(componente, 'transition', 'auto');\n    }\n\n    addRotation(componente: string, novaRotacao: string, scale: string) {\n        this.setStyleClass(componente, 'transform', `${novaRotacao} ${scale}`);\n    }\n\n    addAnimation(componente: string) {\n        this.setStyleClass(componente, 'transition', `0.5s linear`);\n    }\n\n    converterPDFBase64ParaBlob() {\n        const arrBuffer = this.base64ToArrayBuffer(this.getImageSrc());\n        const newBlob = new Blob([arrBuffer], { type: 'application/pdf' });\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(newBlob);\n            return;\n        }\n        return window.URL.createObjectURL(newBlob);\n    }\n\n    private getImageSrc() {\n        return this.images[this._activeIndex].previewImageSrc;\n    }\n\n    base64ToArrayBuffer(data) {\n        const binaryString = window.atob(data);\n        const binaryLen = binaryString.length;\n        const bytes = new Uint8Array(binaryLen);\n        for (let i = 0; i < binaryLen; i++) {\n            const ascii = binaryString.charCodeAt(i);\n            bytes[i] = ascii;\n        }\n        return bytes;\n    }\n\n    showPDFOnly() {\n        this.showOnlyPDF = !this.showOnlyPDF;\n        //this.proximaImagem();\n    }\n\n    setStyleClass(nomeClasse: string, nomeStyle: string, cor: string) {\n        let cont;\n        const listaElementos = document.getElementById(this.idContainer).getElementsByClassName(nomeClasse);\n        for (cont = 0; cont < listaElementos.length; cont++) {\n            this.renderer.setStyle(listaElementos.item(cont), nomeStyle, cor);\n        }\n    }\n\n    getIdIframe() {\n        return this.idContainer + '-iframe'\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './assets/mytheme/variables';\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}\r\n\r\n.p-tooltip {\r\n  margin-left: -20px;\r\n\r\n}\r\n\r\n.footer-icon {\r\n    font-size: xx-large;\r\n  }\r\n  \r\n  .image-viewer-tooltip {\r\n    position: relative;\r\n    display: inline-block;\r\n    z-index: 1000;\r\n  }\r\n  \r\n  .image-viewer-tooltip .tooltiptext {\r\n    visibility: hidden;\r\n    width: 120px;\r\n    background-color: #555;\r\n    color: #fff;\r\n    text-align: center;\r\n    border-radius: 6px;\r\n    padding: 5px 0;\r\n    position: absolute;\r\n    z-index: 1;\r\n    bottom: 125%;\r\n    left: 40%;\r\n    margin-left: -60px;\r\n    opacity: 0;\r\n    transition: opacity 0.3s;\r\n  }\r\n  \r\n  .image-viewer-tooltip .tooltiptext::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 100%;\r\n    left: 50%;\r\n    margin-left: -5px;\r\n    border-width: 5px;\r\n    border-style: solid;\r\n    border-color: #555 transparent transparent transparent;\r\n  }\r\n  \r\n  .image-viewer-tooltip:hover .tooltiptext {\r\n    visibility: visible;\r\n    opacity: 1;\r\n  }\r\n\r\n\r\n//********************************\r\n//slider styles\r\n\r\n.thumbnail {\r\n\r\n  border-width: 2px;\r\n  border-color: transparent;\r\n  border-style: solid;\r\n  padding: 2px;  \r\n  margin: 2px;\r\n  cursor: pointer;\r\n  border-radius: 2px;\r\n\r\n  &-image {\r\n    width: 100px;\r\n    height: 100px;\r\n    background-size: cover; \r\n    background-repeat: no-repeat; \r\n    background-position: 50% 50%;\r\n  }\r\n\r\n  &-selected {\r\n    border-color: #ffffff;\r\n  }\r\n}",
                    "styleUrl": "./image-viewer-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "activeIndex": {
                    "name": "activeIndex",
                    "setSignature": {
                        "name": "activeIndex",
                        "type": "void",
                        "args": [
                            {
                                "name": "newValue",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 72,
                        "jsdoctags": [
                            {
                                "name": "newValue",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "activeIndex",
                        "type": "number",
                        "returnType": "number",
                        "line": 60
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ImageViewerComponent-1",
            "templateData": "\n<div #mydiv class=\"header\"><div style=\"line-height: 48px;\"></div></div>\n<div id=\"{{idContainer}}\" class=\"image-gallery-2\">\n    <div class=\"image-container\"></div>\n</div>  \n\n\n<app-slider #slider>\n\t<div *ngFor=\"let image of images; let i = index\" [attr.data-index]=\"i\" appSliderItem>\n        <div class=\"thumbnail\">\n            <div class=\"thumbnail-image\" [ngStyle]=\"{'background-image': 'url(' + image.thumbnailImageSrc +')'}\">{{slidesIndex}}</div>\n        </div>            \n    </div>\n</app-slider>\n"
        },
        {
            "name": "ImageViewerComponent",
            "id": "component-ImageViewerComponent-600bf0656b51c9d2717be430c63b52de-2",
            "file": "src/stories/image-viewer-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-viewer",
            "styleUrls": [
                "./image-viewer-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-viewer-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "images",
                    "line": 20,
                    "type": "any[]"
                },
                {
                    "name": "showViewer",
                    "defaultValue": "false",
                    "line": 21
                }
            ],
            "outputsClass": [
                {
                    "name": "showViewerChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_activeIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "actions",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "BASE_64_IMAGE",
                    "defaultValue": "'data:image/png;base64,'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "BASE_64_PNG",
                    "defaultValue": "`${this.BASE_64_IMAGE} `",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "containerMode",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "curSpan",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "displayCustom",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "idContainer",
                    "defaultValue": "\"idOnHTML\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "imageRotation",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isImageVertical",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "menuAutoHideTimer",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "ROTATE_BY_90_DEGREES",
                    "defaultValue": "90",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "showOnlyPDF",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "totalImages",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "viewer",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "viewerFullscreen",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "wrapper",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "addAnimation",
                    "args": [
                        {
                            "name": "componente",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 551,
                    "jsdoctags": [
                        {
                            "name": "componente",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addRotation",
                    "args": [
                        {
                            "name": "componente",
                            "type": "string"
                        },
                        {
                            "name": "novaRotacao",
                            "type": "string"
                        },
                        {
                            "name": "scale",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 547,
                    "jsdoctags": [
                        {
                            "name": "componente",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "novaRotacao",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scale",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "base64ToArrayBuffer",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 587,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeViewer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234
                },
                {
                    "name": "converterPDFBase64ParaBlob",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 573
                },
                {
                    "name": "getIdIframe",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 611
                },
                {
                    "name": "getIframeSize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ widthIframe: any; heightIframe: any; }",
                    "typeParameters": [],
                    "line": 413
                },
                {
                    "name": "getImageSrc",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 583,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getScale",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 504
                },
                {
                    "name": "hideImageViewerButtons",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 420
                },
                {
                    "name": "initialiseImageViewer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 332
                },
                {
                    "name": "injectIframe",
                    "args": [
                        {
                            "name": "widthIframe",
                            "type": "number"
                        },
                        {
                            "name": "heightIframe",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 401,
                    "jsdoctags": [
                        {
                            "name": "widthIframe",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "heightIframe",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isImageOverlappingInVertical",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 520
                },
                {
                    "name": "isImageUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 429
                },
                {
                    "name": "isPDF",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 425
                },
                {
                    "name": "loadPdfViewer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 388
                },
                {
                    "name": "mostrarFullscreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 555
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187
                },
                {
                    "name": "nextImage",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 449,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 247
                },
                {
                    "name": "option",
                    "args": [
                        {
                            "name": "action",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198
                },
                {
                    "name": "previousImage",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 459,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAnimation",
                    "args": [
                        {
                            "name": "componente",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 543,
                    "jsdoctags": [
                        {
                            "name": "componente",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetImageViewer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 433
                },
                {
                    "name": "resetZoom",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 486
                },
                {
                    "name": "rotateLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 477
                },
                {
                    "name": "rotateRight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 468
                },
                {
                    "name": "selection",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStyleClass",
                    "args": [
                        {
                            "name": "nomeClasse",
                            "type": "string"
                        },
                        {
                            "name": "nomeStyle",
                            "type": "string"
                        },
                        {
                            "name": "cor",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 603,
                    "jsdoctags": [
                        {
                            "name": "nomeClasse",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nomeStyle",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cor",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 356
                },
                {
                    "name": "showMenu",
                    "args": [
                        {
                            "name": "menu",
                            "type": ""
                        },
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showPDFOnly",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 598
                },
                {
                    "name": "startDelayClose",
                    "args": [
                        {
                            "name": "menu",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopDelayClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "thumbnailAction",
                    "args": [
                        {
                            "name": "action",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRotation",
                    "args": [
                        {
                            "name": "animate",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 495,
                    "jsdoctags": [
                        {
                            "name": "animate",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadImage",
                    "args": [
                        {
                            "name": "newRotation",
                            "type": "string"
                        },
                        {
                            "name": "scale",
                            "type": "string"
                        },
                        {
                            "name": "animated",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 527,
                    "jsdoctags": [
                        {
                            "name": "newRotation",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scale",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "animated",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "zoomIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302
                },
                {
                    "name": "zoomOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, Input, OnChanges, OnInit, OnDestroy, Output, Renderer2, SimpleChanges } from '@angular/core';\nimport ImageViewer from 'iv-viewer';\nimport {FullScreenViewer} from 'iv-viewer';\nimport { MenuItem } from 'primeng/api';\n\n@Component({\n  selector: 'app-image-viewer',\n  templateUrl: './image-viewer-component.html',\n  styleUrls: ['./image-viewer-component.scss']\n})\n\nexport class ImageViewerComponent implements OnDestroy, OnInit, AfterViewInit {\n\n    displayCustom: boolean = true;\n    \n    BASE_64_IMAGE = 'data:image/png;base64,';\n    BASE_64_PNG = `${this.BASE_64_IMAGE} `;\n    ROTATE_BY_90_DEGREES = 90;\n\n    @Input() images: any[];\n    @Input() showViewer = false;\n    @Output() showViewerChange:EventEmitter<boolean> = new EventEmitter();\n\n    idContainer:string = \"idOnHTML\";    \n    viewerFullscreen;\n    viewer;\n    wrapper;\n    curSpan;\n    totalImages: number;\n    imageRotation: number;\n    isImageVertical: boolean; \n    showOnlyPDF = false;\n    menuAutoHideTimer:any = null;\n\n    _activeIndex: number = 0; \n    containerMode:boolean = true;\n\n    actions: MenuItem[];\n    //\n    // function   : set up image view more actions menu\n    //\n    // parameters : renderer - custom.alternative DOM renderer\n    //\n    // returns    : none.\n    // \n    constructor(private renderer: Renderer2) {\n        //pop-up menu items\n        this.actions = [\n        {\n            id: 'openInNewTab', \n            label: 'Open in new tab', \n            icon: 'pi pi-clone', \n            disabled : false,\n            command: (event) => {\n                this.option(\"openInNewTab\");\n            }\n        }, \n        ];        \n    }\n\n    //\n    // function   : show image actions quick menu\n    //\n    // parameters : menu  - reference to pop quick menu\n    //              event - DOM event\n    //\n    // returns    : none.\n    //\n    showMenu(menu, event) {\n        menu.show(event);\n    }\n\n    //\n    // function   : start delay auto close actions menu, started when\n    //              cusros is moved away from more actions button\n    //\n    // parameters : menu  - reference to action primeng menu\n    //\n    // returns    : none.\n    //    \n    startDelayClose(menu) {\n        this.menuAutoHideTimer = setTimeout(()=> {\n          menu.hide();  \n          this.menuAutoHideTimer = null;\n        },100);\n    }\n\n    //\n    // function   : stop actions menu auto close as a result\n    //              of the cursor moving into the actions menu\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //    \n    stopDelayClose() {\n        //stop delay close timer if active\n        if (this.menuAutoHideTimer) {\n            clearTimeout(this.menuAutoHideTimer);\n            this.menuAutoHideTimer = null;      \n        }\n    }\n\n    //\n    // function   : thumbnail action menu request event handler\n    //\n    // parameters : action - thumbnail action requested\n    //\n    // returns    : none.\n    //       \n    thumbnailAction(action) {\n        switch (action) {\n            case \"rotateLeft\":\n                this.rotateLeft();\n                break;\n            case \"zoomOut\":\n                this.zoomOut();\n                break;\n            case \"fit2Screen\":\n                this.resetZoom();\n                break;\n            case \"zoomIn\":\n                this.zoomIn();\n                break;\n            case \"rotateRight\":\n                this.rotateRight();                \n                break;\n        }\n    }\n\n    //\n    // function   : options toolbar click handler\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    // \n    option(action) {\n        switch (action) {\n            case \"download\":\n\n                break;\n            case \"openInNewTab\":\n                window.open(this.images[this._activeIndex], \"_blank\");\n                break;\n            case \"close\":\n                this.showViewer = false;\n                this.showViewerChange.emit(false);\n                break;\n        }\n    }\n\n    //\n    // function   : thumbnail active index getter, used in combination \n    //              with setter to update image viewer then thumbnail changes\n    //\n    // parameters : none.\n    //\n    // returns    : thumbnail active index\n    // \n    get activeIndex(): number {\n        return this._activeIndex;\n    }\n\n    //\n    // function   : thumbnail active index setter, used to update image\n    //              view with new thumbnail selection\n    //\n    // parameters : newValue - new thumbnail selection index\n    //\n    // returns    : none.\n    // \n    set activeIndex(newValue) {\n        if (this.images && 0 <= newValue && newValue <= (this.images.length - 1)) {  \n            this._activeIndex = newValue;\n            this.nextImage(this._activeIndex);\n        }\n    } \n\n    //\n    // function   : select next thumbnail\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    // \n    next() {\n        this.activeIndex = this.activeIndex + 1;\n    }\n\n    //\n    // function   : select previous thumbnail\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    // \n    previous() {\n        this.activeIndex = this.activeIndex - 1;\n    }\n\n    //\n    // function   : select new thumbnail image. This is called in \n    //              response to a user clicking on a thumbnail image\n    //\n    // parameters : index - new thumbnail image selection\n    //\n    // returns    : none.\n    //     \n    selection(index) {\n        this.activeIndex = index;\n    }\n\n    //\n    // function   : component destroy event handler. Need to\n    //              make sure all resources are cleaned up\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    ngOnDestroy() { \n        this.closeViewer();\n    }\n\n    //\n    // function   : close image viewer, this will delete the image viewer and\n    //              unbind all events handlers\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    closeViewer() {\n        if (this.viewer) {\n            this.viewer = this.viewer.destroy(); \n        }\n    }\n\n    //\n    // function   : class initialised event handler\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    ngOnInit() {\n    }\n\n    //\n    // function   : called once the view and child views have initialised,\n    //              initialise image viewer and show the initial selected \n    //              image\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    ngAfterViewInit() {\n        if (this.showViewer) {\n            this.initialiseImageViewer();\n            setTimeout(() => {\n                this.showImage();\n            }, 1000);\n        }\n    }\n\n    //\n    // function   : component change event handler, monitors the show/hide\n    //              request for this component from its parent\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //      \n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"showViewer\"]) {\n            if (changes[\"showViewer\"].currentValue===true && \n                changes[\"showViewer\"].previousValue===false && \n                this.images && \n                this.images.length > 0) {\n\n                this.initialiseImageViewer();\n                setTimeout(() => {\n                    this.showImage();\n                }, 1000);\n            } else if (changes[\"showViewer\"].currentValue===false && \n                       changes[\"showViewer\"].previousValue===true ) {\n                \n                this.closeViewer();\n            }\n        }\n    }\n\n    //\n    // function   : zoom in image displayed in viewer by 10%\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    zoomIn() {\n        let zoomPercent = this.viewer._state.zoomValue + 50;\n        if (zoomPercent > 500) {\n            zoomPercent = 500;\n        }\n        this.viewer.zoom(zoomPercent);\n    }\n\n    //\n    // function   : zoom out image displayed in viewer by 10%\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    zoomOut() {\n        let zoomPercent = this.viewer._state.zoomValue - 50;        \n        if (zoomPercent < 100) {\n            zoomPercent = 100;\n        }\n        this.viewer.zoom(zoomPercent);\n    }\n\n    //\n    // function   : create image viewer and insert it into DOM\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    // \n    initialiseImageViewer() {\n        this.imageRotation = 0;\n        this.totalImages = this.images.length;\n        //only initilaise viewer once\n        if (!this.viewer) {\n            if (this.containerMode) {\n                this.wrapper = document.getElementById(`${this.idContainer}`);\n                if (this.wrapper) {\n                    this.curSpan = this.wrapper.querySelector('#current');\n                    this.viewer = new ImageViewer(this.wrapper.querySelector('.image-container'));\n                }\n            } else {\n                this.viewer = new FullScreenViewer();\n            }\n        }\n    }\n\n    //\n    // function   : create image viewer and insert it into DOM\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    showImage() {\n        if (this.containerMode) {\n            //only needed for container mode\n            this.resetImageViewer();\n        }\n        let imgObj = this.BASE_64_PNG;\n        if (this.isPDF()) {\n            this.loadPdfViewer();\n\n        } else if (this.isImageUrl()) {\n            imgObj = this.getImageSrc();\n\n        } else {\n            imgObj = this.getImageSrc();            \n            //imgObj = this.BASE_64_PNG + this.getImageSrc();\n        }\n        if (this.containerMode) {\n            //container mode\n            this.viewer.load(imgObj);\n        } else {\n            //full screen mode\n            this.viewer.show(imgObj);\n        }\n    }\n\n    //\n    // function   : load pdf viewer \n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    loadPdfViewer() {\n        this.hideImageViewerButtons();\n        const {widthIframe, heightIframe} = this.getIframeSize();\n        this.injectIframe(widthIframe, heightIframe);\n    }\n\n    //\n    // function   : create iframe to contain pdf viewer and insert into custom render\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    injectIframe(widthIframe: number, heightIframe: number) {\n        const ivImageWrap = document.getElementById(this.idContainer).getElementsByClassName('iv-image-wrap').item(0);\n        const iframe = document.createElement('iframe');\n\n        iframe.id = this.getIdIframe();\n        iframe.style.width = `${widthIframe}px`;\n        iframe.style.height = `${heightIframe}px`;\n        iframe.src = `${this.converterPDFBase64ParaBlob()}`;\n\n        this.renderer.appendChild(ivImageWrap, iframe);\n    }\n\n    getIframeSize() {\n        const container = document.getElementById(this.idContainer);\n        const widthIframe = container.offsetWidth;\n        const heightIframe = container.offsetHeight;\n        return {widthIframe, heightIframe};\n    }\n\n    hideImageViewerButtons() {\n        this.setStyleClass('iv-loader', 'visibility', 'hidden');\n        this.setStyleClass('options-image-viewer', 'visibility', 'hidden');\n    }\n\n    isPDF() {\n        return this.getImageSrc().startsWith('JVBE') || this.getImageSrc().startsWith('0M8R');\n    }\n\n    isImageUrl() {\n        return this.getImageSrc().match(new RegExp(/^(https|http|www\\.)/g));\n    }\n\n    resetImageViewer() {\n        this.imageRotation = 0;\n        const container = document.getElementById(this.idContainer);\n        const iframeElement = document.getElementById(this.getIdIframe());\n        const ivLargeImage = document.getElementById(this.idContainer).getElementsByClassName(\"iv-image\").item(0);\n\n        if (iframeElement) {\n            this.renderer.removeChild(container, iframeElement);\n            if (ivLargeImage) {\n                this.renderer.removeChild(container, ivLargeImage);\n            }\n        }\n        this.setStyleClass('iv-loader', 'visibility', 'auto');\n        this.setStyleClass('options-image-viewer', 'visibility', 'inherit');\n    }\n\n    nextImage(index:number) {\n        //reset image rotation\n        this.isImageVertical = false;\n        if (!this.isPDF() && this.showOnlyPDF) {\n            this.nextImage(index);\n            return;\n        }\n        this.showImage();\n    }\n\n    previousImage(index:number) {\n        this.isImageVertical = false;\n        if (!this.isPDF() && this.showOnlyPDF) {\n            this.previousImage(index);\n            return;\n        }\n        this.showImage();\n    }\n\n    rotateRight() {\n        const timeout = this.resetZoom();\n        setTimeout(() => {\n            this.imageRotation += this.ROTATE_BY_90_DEGREES;\n            this.isImageVertical = !this.isImageVertical;\n            this.updateRotation();\n        }, timeout);\n    }\n\n    rotateLeft() {\n        const timeout = this.resetZoom();\n        setTimeout(() => {\n            this.imageRotation -= this.ROTATE_BY_90_DEGREES;\n            this.isImageVertical = !this.isImageVertical;\n            this.updateRotation();\n        }, timeout);\n    }\n\n    resetZoom(): number {\n        this.viewer.zoom(100);\n        let timeout = 800;\n        if (this.viewer._state.zoomValue === 100) {\n            timeout = 0;\n        }\n        return timeout;\n    }\n\n    updateRotation(animate = true) {\n        let scale = '';\n        if (this.isImageVertical && this.isImageOverlappingInVertical()) {\n            scale = `scale(${this.getScale()})`;\n        }\n        const newRoation = `rotate(${this.imageRotation}deg)`;\n        this.uploadImage(newRoation, scale, animate);\n    }\n\n    getScale() {\n\n        const containerElement = document.getElementById(this.idContainer);\n        const ivLargeImageElement = document.getElementById(this.idContainer).getElementsByClassName(\"iv-image\").item(0);\n        const diferencaTamanhoImagem = ivLargeImageElement.clientWidth - containerElement.clientHeight;\n\n        if (diferencaTamanhoImagem >= 250 && diferencaTamanhoImagem < 300) {\n            return (ivLargeImageElement.clientWidth - containerElement.clientHeight) / (containerElement.clientHeight) - 0.1;\n        } else if (diferencaTamanhoImagem >= 300 && diferencaTamanhoImagem < 400) {\n            return ((ivLargeImageElement.clientWidth - containerElement.clientHeight) / (containerElement.clientHeight)) - 0.15;\n        } else if (diferencaTamanhoImagem >= 400) {\n            return ((ivLargeImageElement.clientWidth - containerElement.clientHeight) / (containerElement.clientHeight)) - 0.32;\n        }\n        return 0.6;\n    }\n\n    isImageOverlappingInVertical() {\n        const marginError = 5;\n        const containerElement: Element = document.getElementById(this.idContainer);\n        const ivLargeImageElement: Element = document.getElementById(this.idContainer).getElementsByClassName(\"iv-image\").item(0);\n        return containerElement.clientHeight < ivLargeImageElement.clientWidth + marginError;\n    }\n\n    uploadImage(newRotation: string, scale: string, animated = true) {\n        if (animated) {\n            this.addAnimation('iv-snap-image');\n            this.addAnimation(\"iv-image\");\n        }\n        this.addRotation('iv-snap-image', newRotation, scale);\n        this.addRotation(\"iv-image\", newRotation, scale);\n\n        setTimeout(() => {\n            if (animated) {\n                this.removeAnimation('iv-snap-image');\n                this.removeAnimation(\"iv-image\");\n            }\n        }, 501);\n    }\n\n    removeAnimation(componente: string) {\n        this.setStyleClass(componente, 'transition', 'auto');\n    }\n\n    addRotation(componente: string, novaRotacao: string, scale: string) {\n        this.setStyleClass(componente, 'transform', `${novaRotacao} ${scale}`);\n    }\n\n    addAnimation(componente: string) {\n        this.setStyleClass(componente, 'transition', `0.5s linear`);\n    }\n\n    mostrarFullscreen() {\n        const timeout = this.resetZoom();\n        setTimeout(() => {\n\n            this.viewerFullscreen = new FullScreenViewer();\n            let imgSrc;\n\n            if (this.isImageUrl()) {\n                imgSrc = this.getImageSrc();\n            } else {\n\n                imgSrc = this.BASE_64_PNG + this.getImageSrc();\n            }\n            this.viewerFullscreen.show(imgSrc, imgSrc);\n            this.updateRotation(false);\n        }, timeout);\n    }\n\n    converterPDFBase64ParaBlob() {\n        const arrBuffer = this.base64ToArrayBuffer(this.getImageSrc());\n        const newBlob = new Blob([arrBuffer], { type: 'application/pdf' });\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(newBlob);\n            return;\n        }\n        return window.URL.createObjectURL(newBlob);\n    }\n\n    private getImageSrc() {\n        return this.images[this._activeIndex];\n    }\n\n    base64ToArrayBuffer(data) {\n        const binaryString = window.atob(data);\n        const binaryLen = binaryString.length;\n        const bytes = new Uint8Array(binaryLen);\n        for (let i = 0; i < binaryLen; i++) {\n            const ascii = binaryString.charCodeAt(i);\n            bytes[i] = ascii;\n        }\n        return bytes;\n    }\n\n    showPDFOnly() {\n        this.showOnlyPDF = !this.showOnlyPDF;\n        //this.proximaImagem();\n    }\n\n    setStyleClass(nomeClasse: string, nomeStyle: string, cor: string) {\n        let cont;\n        const listaElementos = document.getElementById(this.idContainer).getElementsByClassName(nomeClasse);\n        for (cont = 0; cont < listaElementos.length; cont++) {\n            this.renderer.setStyle(listaElementos.item(cont), nomeStyle, cor);\n        }\n    }\n\n    getIdIframe() {\n        return this.idContainer + '-iframe'\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './assets/mytheme/variables';\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}\r\n\r\n.p-tooltip {\r\n  margin-left: -20px;\r\n}\r\n\r\n.footer-icon {\r\n  font-size: xx-large;\r\n}\r\n\r\n* {\r\n  margin: 0px;\r\n  padding:0px;\r\n}\r\n.container { \r\n  position:absolute;\r\n  width: 100%; \r\n  height: 100%; \r\n  display: flex; \r\n  flex-direction: column;\r\n  background: linear-gradient(360deg, #000000 -6.3%, rgba(0, 0, 0, 0.7) 21.67%, rgba(0, 0, 0, 0.7) 92%);\r\n} \r\n\r\n.header { \r\n  width: 100%;\r\n  height:48px;\r\n  background: #272E34;\r\n  text-align: center;\r\n  z-index: 101;\r\n\r\n  &-text {\r\n    font-family: IBM Plex Sans;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 14px;\r\n    line-height: 48px;\r\n    text-align: center;\r\n    color: #FFFFFF;\r\n    margin-left: 8px;\r\n  }\r\n}\r\n\r\n.image { \r\n  width: 100%;  \r\n  flex: 1;\r\n  margin-top: 48px;\r\n  margin-bottom: 16px;\r\n\r\n  &-selection {\r\n    position: absolute;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%; \r\n    height: 100%; \r\n    justify-content: center;\r\n\r\n    &-button {\r\n      z-index: 1001;\r\n      height: 36px;\r\n      width: 36px;\r\n      border-radius: 18px;\r\n      background-color: #141414;\r\n      color: #ffffff;\r\n      line-height: 36px;\r\n      cursor: pointer;            \r\n      text-align: center;\r\n\r\n      &:hover {\r\n        background-color: #0062F5;\r\n      }\r\n      \r\n      &>i {\r\n        font-size: 1.0em;\r\n      }\r\n\r\n      &-prev {\r\n        margin-left : 104px;\r\n      }\r\n\r\n      &-next {\r\n        margin-right : 104px;\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n\r\n.thumbnail { \r\n  width: 100%;  \r\n  height: 176px;\r\n}\r\n\r\n.options {\r\n  color: white;\r\n  line-height: 48px;\r\n  float: right;\r\n\r\n  &-toolbar {\r\n    z-index: 101;\r\n\r\n    &-tool {\r\n      height: 48px;\r\n\r\n      &:last-child {\r\n        padding-right: 8px;\r\n        padding-left: 8px;\r\n        border-left-style: solid;\r\n        border-left-width: 1px;\r\n        border-left-color: rgba(170,170,170,0.5);\r\n      }\r\n\r\n      &-button {\r\n          margin-top: 6px;\r\n          color: #ffffff;\r\n          width: 36px;\r\n          height: 36px;\r\n          text-align: center;\r\n          cursor: pointer;\r\n          line-height: 36px; \r\n\r\n          &>a {\r\n            font-size: 1.0em;\r\n            color: #ffffff;\r\n          }\r\n\r\n          &:first-child {\r\n            border-top-left-radius: 2px;\r\n            border-bottom-left-radius: 2px;            \r\n          }\r\n    \r\n          &:last-child {\r\n            border-top-right-radius: 2px;\r\n            border-bottom-right-radius: 2px;            \r\n          }\r\n\r\n          &:hover {\r\n            background: #171B1E;\r\n          }\r\n\r\n          >span {\r\n              line-height:24px; \r\n              font-size:12px;\r\n          }\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n",
                    "styleUrl": "./image-viewer-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy",
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "activeIndex": {
                    "name": "activeIndex",
                    "setSignature": {
                        "name": "activeIndex",
                        "type": "void",
                        "args": [
                            {
                                "name": "newValue",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 173,
                        "jsdoctags": [
                            {
                                "name": "newValue",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "activeIndex",
                        "type": "number",
                        "returnType": "number",
                        "line": 161
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "ImageViewerComponent-2",
            "templateData": "<div class=\"container\" [ngStyle]=\"{'display': showViewer ? 'flex' : 'none'}\"> \n\n    <div class=\"header\"> \n        <span class=\"header-text\">{{images[_activeIndex]}}</span>\n        <span class=\"options\">\n            <div class=\"options-toolbar p-d-flex\">\n                <div class=\"options-toolbar-tool\">\n                    <div pTooltip=\"Download\" tooltipPosition=\"bottom\" class=\"p-as-center ui-border options-toolbar-tool-button\" >\n                        <!--span class=\"pi pi-download\"></span-->\n                        <a class=\"pi pi-download\" href=\"{{images[_activeIndex]}}\" target=\"_blank\" download=\"{{images[_activeIndex]}}\"></a>\n                    </div>\n                </div>\n\n                <p-menu (mouseenter)=\"stopDelayClose();\" (mouseleave)=\"menu.hide($event);\" #menu [popup]=\"true\" [model]=\"actions\"></p-menu>\n\n                <div class=\"options-toolbar-tool\">\n                    <div pTooltip=\"More&nbsp;actions\" tooltipPosition=\"bottom\" (mouseleave)=\"startDelayClose(menu);\" (click)=\"showMenu(menu, $event)\" class=\"p-as-center ui-border options-toolbar-tool-button\">\n                        <span class=\"pi pi-ellipsis-v\"></span>\n                    </div> \n                </div>\n\n                <div class=\"options-toolbar-tool\">\n                    <div pTooltip=\"Close\" tooltipPosition=\"bottom\" (click)=\"option('close')\" class=\"p-as-center ui-border options-toolbar-tool-button\" >\n                        <span class=\"pi pi-times\"></span>\n                    </div>\n                </div>\n            </div>\n        </span>\n    </div>\n\n    <div class=\"image image-gallery-2\" id=\"{{idContainer}}\"> \n\n        <div class=\"image-selection\">\n            <div class=\"p-d-flex\">\n                <div pTooltip=\"Previous\" tooltipPosition=\"right\" (click)=\"activeIndex=activeIndex-1\" class=\"image-selection-button image-selection-button-prev\"><i class=\"pi pi-chevron-left\"></i></div>\n                <div pTooltip=\"Next\" tooltipPosition=\"left\" (click)=\"activeIndex=activeIndex+1\" class=\"image-selection-button image-selection-button-next p-ml-auto\"><i class=\"pi pi-chevron-right\"></i></div>\n            </div>\n        </div>\n\n        <div class=\"image-container\"></div>        \n    </div> \n\n    <div class=\"thumbnail\"> \n        <app-thumbnail (click)=\"thumbnailAction($event);\" [(index)]=\"activeIndex\" [images]=\"images\"></app-thumbnail>\n    </div> \n\n</div>\n"
        },
        {
            "name": "PdfDocumentComponent",
            "id": "component-PdfDocumentComponent-d2bb83f76a3a7272dc170ebd2e8a9f8c",
            "file": "src/stories/pdf-viewer-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pdf-viewer",
            "styleUrls": [
                "./pdf-viewer-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pdf-viewer-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pdfSrc",
                    "line": 13,
                    "type": "string | PDFSource | ArrayBuffer"
                },
                {
                    "name": "showViewer",
                    "defaultValue": "false",
                    "line": 15
                }
            ],
            "outputsClass": [
                {
                    "name": "showViewerChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actions",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "autoresize",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "error",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fitToPage",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isLoaded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isOutlineShown",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "menuAutoHideTimer",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "originalSize",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "outline",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "page",
                    "defaultValue": "\"1\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "pdf",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "pdfComponent",
                    "type": "PdfViewerComponent",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PdfViewerComponent"
                        }
                    ],
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "pdfQuery",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "progressData",
                    "type": "PDFProgressData",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "renderText",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "rotation",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "showAll",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "stickToPage",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "totalImages",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "zoom",
                    "defaultValue": "1.0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "afterLoadComplete",
                    "args": [
                        {
                            "name": "pdf",
                            "type": "PDFDocumentProxy"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "description": "<p>Get pdf information after it&#39;s loaded</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5875,
                                "end": 5878,
                                "flags": 0,
                                "escapedText": "pdf"
                            },
                            "type": "PDFDocumentProxy",
                            "tagName": {
                                "pos": 5869,
                                "end": 5874,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "action",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeViewer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161
                },
                {
                    "name": "currentPreviewPage",
                    "args": [
                        {
                            "name": "e",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 339,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInt",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 309,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "incrementPage",
                    "args": [
                        {
                            "name": "amount",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "jsdoctags": [
                        {
                            "name": "amount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "incrementZoom",
                    "args": [
                        {
                            "name": "amount",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "jsdoctags": [
                        {
                            "name": "amount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadOutline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "description": "<p>Get outline</p>\n"
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "destination",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317,
                    "description": "<p>Navigate to destination</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7445,
                                "end": 7456,
                                "flags": 0,
                                "escapedText": "destination"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 7439,
                                "end": 7444,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172
                },
                {
                    "name": "onError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "description": "<p>Handle error callback</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6288,
                                "end": 6293,
                                "flags": 0,
                                "escapedText": "error"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 6282,
                                "end": 6287,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onFileSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "description": "<p>Render PDF preview on selecting file</p>\n"
                },
                {
                    "name": "onProgress",
                    "args": [
                        {
                            "name": "progressData",
                            "type": "PDFProgressData"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "description": "<p>Pdf loading progress callback</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7095,
                                "end": 7107,
                                "flags": 0,
                                "escapedText": "progressData"
                            },
                            "type": "PDFProgressData",
                            "tagName": {
                                "pos": 7071,
                                "end": 7076,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 7077,
                                "end": 7094,
                                "flags": 0,
                                "kind": 277,
                                "type": {
                                    "pos": 7078,
                                    "end": 7093,
                                    "flags": 2097152,
                                    "kind": 161,
                                    "typeName": {
                                        "pos": 7078,
                                        "end": 7093,
                                        "flags": 2097152,
                                        "escapedText": "PDFProgressData"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "openLocalFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200
                },
                {
                    "name": "pageRendered",
                    "args": [
                        {
                            "name": "e",
                            "type": "CustomEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 335,
                    "description": "<p>Page rendered callback, which is called when a page is rendered (called multiple times)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7866,
                                "end": 7867,
                                "flags": 0,
                                "escapedText": "e"
                            },
                            "type": "CustomEvent",
                            "tagName": {
                                "pos": 7846,
                                "end": 7851,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 7852,
                                "end": 7865,
                                "flags": 0,
                                "kind": 277,
                                "type": {
                                    "pos": 7853,
                                    "end": 7864,
                                    "flags": 2097152,
                                    "kind": 161,
                                    "typeName": {
                                        "pos": 7853,
                                        "end": 7864,
                                        "flags": 2097152,
                                        "escapedText": "CustomEvent"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "resetZoom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219
                },
                {
                    "name": "rotate",
                    "args": [
                        {
                            "name": "angle",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "jsdoctags": [
                        {
                            "name": "angle",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollToPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 324,
                    "description": "<p>Scroll view</p>\n"
                },
                {
                    "name": "searchQueryChanged",
                    "args": [
                        {
                            "name": "newQuery",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 347,
                    "jsdoctags": [
                        {
                            "name": "newQuery",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPassword",
                    "args": [
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285,
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showMenu",
                    "args": [
                        {
                            "name": "menu",
                            "type": ""
                        },
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startDelayClose",
                    "args": [
                        {
                            "name": "menu",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopDelayClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133
                },
                {
                    "name": "toggleOutline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ViewChild, Component, EventEmitter, Input, OnInit, OnDestroy, Output, SimpleChanges, NgZone } from '@angular/core';\nimport { MenuItem } from 'primeng/api';\nimport { PDFProgressData, PdfViewerComponent, PDFDocumentProxy, PDFSource, } from 'ng2-pdf-viewer';\n\n@Component({\n  selector: 'app-pdf-viewer',\n  templateUrl: './pdf-viewer-component.html',\n  styleUrls: ['./pdf-viewer-component.scss']\n})\n\nexport class PdfDocumentComponent implements OnDestroy, OnInit, AfterViewInit {\n\n    @Input() pdfSrc: string | PDFSource | ArrayBuffer;\n\n    @Input() showViewer = false;\n    @Output() showViewerChange:EventEmitter<boolean> = new EventEmitter();\n\n    totalImages: number;\n    menuAutoHideTimer:any = null;\n\n    actions: MenuItem[];\n\n    error: any;\n    page = \"1\";\n    rotation = 0;\n    zoom = 1.0;\n    originalSize = true;\n    pdf: any;\n    renderText = true;\n    progressData: PDFProgressData;\n    isLoaded = false;\n    stickToPage = false;\n    showAll = true;\n    autoresize = true;\n    fitToPage = false;\n    outline: any[];\n    isOutlineShown = false;\n    pdfQuery = '';\n\n    @ViewChild(PdfViewerComponent) private pdfComponent: PdfViewerComponent;\n\n    click(action) {\n        switch (action) {\n            case \"rotateLeft\":\n                this.rotate(-90);\n                break;\n\n            case \"zoomOut\":\n                this.incrementZoom(-0.2);\n                break;\n\n            case \"fit2Screen\":\n                this.resetZoom();                \n                break;\n\n            case \"zoomIn\":\n                this.incrementZoom(0.2);\n                break;\n\n            case \"rotateRight\":\n                this.rotate(90);                \n                break;\n\n            case \"openInNewTab\":\n                window.open(this.pdfSrc as string, \"_blank\");\n                break;      \n              \n            case \"close\":\n                this.showViewer = false;\n                this.showViewerChange.emit(false);\n                break;              \n        }\n    }\n\n\n    //\n    // function   : set up image view more actions menu\n    //\n    // parameters : renderer - custom.alternative DOM renderer\n    //\n    // returns    : none.\n    // \n    constructor(private ngZone: NgZone) {\n        //pop-up menu items\n        this.actions = [\n        {\n            id: 'openInNewTab', \n            label: 'Open in new tab', \n            icon: 'pi pi-clone', \n            disabled : false,\n            command: (event) => {\n                this.click(\"openInNewTab\");\n            }\n        }, \n        ];\n    }\n\n    //\n    // function   : show image actions quick menu\n    //\n    // parameters : menu  - reference to pop quick menu\n    //              event - DOM event\n    //\n    // returns    : none.\n    //\n    showMenu(menu, event) {\n        menu.show(event);\n    }\n\n    //\n    // function   : start delay auto close actions menu, started when\n    //              cusros is moved away from more actions button\n    //\n    // parameters : menu  - reference to action primeng menu\n    //\n    // returns    : none.\n    //    \n    startDelayClose(menu) {\n        this.menuAutoHideTimer = setTimeout(()=> {\n          menu.hide();  \n          this.menuAutoHideTimer = null;\n        },100);\n    }\n\n    //\n    // function   : stop actions menu auto close as a result\n    //              of the cursor moving into the actions menu\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //    \n    stopDelayClose() {\n        //stop delay close timer if active\n        if (this.menuAutoHideTimer) {\n            clearTimeout(this.menuAutoHideTimer);\n            this.menuAutoHideTimer = null;      \n        }\n    }\n\n    //\n    // function   : component destroy event handler. Need to\n    //              make sure all resources are cleaned up\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    ngOnDestroy() { \n        this.closeViewer();\n    }\n\n    //\n    // function   : close image viewer, this will delete the image viewer and\n    //              unbind all events handlers\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    closeViewer() {\n\n    }\n\n    //\n    // function   : class initialised event handler\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    ngOnInit() {\n    }\n\n    //\n    // function   : called once the view and child views have initialised,\n    //              initialise image viewer and show the initial selected \n    //              image\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //     \n    ngAfterViewInit() {\n\n    }\n\n    //\n    // function   : component change event handler, monitors the show/hide\n    //              request for this component from its parent\n    //\n    // parameters : none.\n    //\n    // returns    : none.\n    //      \n    ngOnChanges(changes: SimpleChanges) {\n\n    }\n\n    openLocalFile() {\n        //jQuery('#file').trigger('click');\n    }\n    \n    toggleOutline() {\n      this.isOutlineShown = !this.isOutlineShown;\n    }\n    \n    incrementPage(amount: number) {\n      this.page += amount;\n    }\n  \n    incrementZoom(amount: number) {\n      //limit zoom range\n      if ((this.zoom + amount <= 3) && (this.zoom + amount > 0.2)) {\n        this.zoom += amount;\n      }\n    }\n  \n    resetZoom() {\n      this.zoom = 1.0;\n    }\n\n    rotate(angle: number) {\n      this.rotation += angle;\n    }\n    \n    /**\n     * Render PDF preview on selecting file\n     */\n    onFileSelected() {\n      const $pdf: any = document.querySelector('#file');\n  \n      if (typeof FileReader !== 'undefined') {\n        const reader = new FileReader();\n  \n        reader.onload = (e: any) => {\n          this.pdfSrc = e.target.result;\n        };\n  \n        reader.readAsArrayBuffer($pdf.files[0]);\n      }\n    }\n  \n    /**\n     * Get pdf information after it's loaded\n     * @param pdf\n     */\n    afterLoadComplete(pdf: PDFDocumentProxy) {\n      this.ngZone.run(()=> {\n        this.pdf = pdf;\n        this.isLoaded = true;\n        this.loadOutline();\n      })      \n    }\n  \n    /**\n     * Get outline\n     */\n    loadOutline() {\n      this.pdf.getOutline().then((outline: any[]) => {\n        this.outline = outline;\n      });\n    }\n  \n    /**\n     * Handle error callback\n     *\n     * @param error\n     */\n    onError(error: any) {\n      this.error = error; // set error\n  \n      if (error.name === 'PasswordException') {\n        const password = prompt(\n          'This document is password protected. Enter the password:'\n        );\n  \n        if (password) {\n          this.error = null;\n          this.setPassword(password);\n        }\n      }\n    }\n    \n    setPassword(password: string) {\n      let newSrc;\n      if (this.pdfSrc instanceof ArrayBuffer) {\n        newSrc = { data: this.pdfSrc };\n      } else if (typeof this.pdfSrc === 'string') {\n        newSrc = { url: this.pdfSrc };\n      } else {\n        newSrc = { ...this.pdfSrc };\n      }\n      newSrc.password = password;\n      this.pdfSrc = newSrc;\n    }\n  \n    /**\n     * Pdf loading progress callback\n     * @param {PDFProgressData} progressData\n     */\n    onProgress(progressData: PDFProgressData) {\n      console.log(progressData);\n      this.progressData = progressData;\n      this.isLoaded = false;\n      this.error = null; // clear error\n    }\n  \n    getInt(value: number): number {\n      return Math.round(value);\n    }\n  \n    /**\n     * Navigate to destination\n     * @param destination\n     */\n    navigateTo(destination: any) {\n      this.pdfComponent.pdfLinkService.navigateTo(destination);\n    }\n  \n    /**\n     * Scroll view\n     */\n    scrollToPage() {\n      this.pdfComponent.pdfViewer.scrollPageIntoView({\n        pageNumber: 3,\n      });\n    }\n    \n    /**\n     * Page rendered callback, which is called when a page is rendered (called multiple times)\n     *\n     * @param {CustomEvent} e\n     */\n    pageRendered(e: CustomEvent) {\n      console.log('(page-rendered)', e);\n    }\n  \n    currentPreviewPage(e: number) {\n      //not sure why event is outside if angular zone, so change \n      //detection not working correctly, have to explicitly run inside zone\n      this.ngZone.run(()=> {\n        this.page = e.toString();      \n      })\n    }\n\n    searchQueryChanged(newQuery: string) {\n      if (newQuery !== this.pdfQuery) {\n        this.pdfQuery = newQuery;\n        this.pdfComponent.pdfFindController.executeCommand('find', {\n          query: this.pdfQuery,\n          highlightAll: true,\n        });\n      } else {\n        this.pdfComponent.pdfFindController.executeCommand('findagain', {\n          query: this.pdfQuery,\n          highlightAll: true,\n        });\n      }\n    }    \n\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './assets/mytheme/variables';\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}\r\n\r\n* {\r\n  margin: 0px;\r\n  padding:0px;\r\n}\r\n.container { \r\n  position:absolute;\r\n  width: 100%; \r\n  height: 100%; \r\n  display: flex; \r\n  flex-direction: column;\r\n  background: linear-gradient(360deg, #000000 -6.3%, rgba(0, 0, 0, 0.7) 21.67%, rgba(0, 0, 0, 0.7) 92%);\r\n} \r\n\r\n.header { \r\n  width: 100%;\r\n  height:48px;\r\n  background: #272E34;\r\n  text-align: center;\r\n  z-index: 101;\r\n\r\n  &-text {\r\n    font-family: IBM Plex Sans;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 14px;\r\n    line-height: 48px;\r\n    text-align: center;\r\n    color: #FFFFFF;\r\n    margin-left: 8px;\r\n  }\r\n\r\n  &-toolbar {\r\n    z-index: 101;\r\n    color: white;\r\n    line-height: 48px;\r\n    float: right;\r\n\r\n    &-tool {\r\n      height: 48px;\r\n\r\n      &:last-child {\r\n        padding-right: 8px;\r\n        padding-left: 8px;\r\n        border-left-style: solid;\r\n        border-left-width: 1px;\r\n        border-left-color: rgba(170,170,170,0.5);\r\n      }\r\n\r\n      &-button {\r\n          margin-top: 6px;\r\n          color: #ffffff;\r\n          width: 36px;\r\n          height: 36px;\r\n          text-align: center;\r\n          cursor: pointer;\r\n          line-height: 36px; \r\n\r\n          &>a {\r\n            font-size: 1.0em;\r\n            color: #ffffff;\r\n          }\r\n\r\n          &:first-child {\r\n            border-top-left-radius: 2px;\r\n            border-bottom-left-radius: 2px;            \r\n          }\r\n    \r\n          &:last-child {\r\n            border-top-right-radius: 2px;\r\n            border-bottom-right-radius: 2px;            \r\n          }\r\n\r\n          &:hover {\r\n            background: #171B1E;\r\n          }\r\n\r\n          >span {\r\n              line-height:24px; \r\n              font-size:12px;\r\n          }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.pdf { \r\n  width: 100%;  \r\n  flex: 1;\r\n  margin-top: 48px;\r\n  overflow: auto;\r\n\r\n  &-control {\r\n    display: flex;\r\n    justify-content: center;\r\n    position: absolute;\r\n    width: 100%;\r\n    bottom: 16px;\r\n  \r\n    &-toolbar {\r\n      z-index: 101;\r\n  \r\n      &:not(:first-child) {\r\n        margin-left:8px;\r\n      }\r\n  \r\n      &-label {\r\n        font-family: IBM Plex Sans;\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 12px;\r\n        background: #141414;\r\n        color: #ffffff;\r\n        border: 1px solid #000000;\r\n        width: 48px;\r\n        height: 32px;\r\n        text-align: left;\r\n        cursor: pointer;\r\n        line-height: 32px;  \r\n  \r\n        &:first-child {\r\n          border-top-left-radius: 2px;\r\n          border-bottom-left-radius: 2px;            \r\n        }\r\n  \r\n        &:last-child {\r\n          border-top-right-radius: 2px;\r\n          border-bottom-right-radius: 2px;            \r\n        }\r\n  \r\n        &>span {\r\n          line-height: 30px;\r\n          margin-left: 8px;\r\n        }\r\n      }\r\n  \r\n      &-button {\r\n          background: #141414;\r\n          color: #ffffff;\r\n          border: 1px solid #000000;\r\n          width: 32px;\r\n          height: 32px;\r\n          text-align: center;\r\n          cursor: pointer;\r\n          line-height: 32px; \r\n  \r\n          &:first-child {\r\n            border-top-left-radius: 2px;\r\n            border-bottom-left-radius: 2px;            \r\n          }\r\n    \r\n          &:last-child {\r\n            border-top-right-radius: 2px;\r\n            border-bottom-right-radius: 2px;            \r\n          }\r\n  \r\n          &:not(:first-child) {\r\n            border-left-color: rgba(170,170,170, 0.4);\r\n          }\r\n  \r\n          &:hover {\r\n              border-color: #949CAD;\r\n          }\r\n  \r\n          >span {\r\n              line-height:24px; \r\n              font-size:12px;\r\n          }\r\n      }\r\n    }\r\n  }  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                    "styleUrl": "./pdf-viewer-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngZone",
                        "type": "NgZone"
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy",
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"container\" [ngStyle]=\"{'display': showViewer ? 'flex' : 'none'}\"> \n\n    <div class=\"header\"> \n        <span class=\"header-text\">{{pdfSrc}}</span>\n\n        <span class=\"header-toolbar p-d-flex\">\n            <div class=\"header-toolbar-tool\">\n                <div pTooltip=\"Download\" tooltipPosition=\"bottom\" class=\"p-as-center ui-border header-toolbar-tool-button\" >\n                    <a class=\"pi pi-download\" href=\"{{pdfSrc}}\" target=\"_blank\" download=\"{{pdfSrc}}\"></a>\n                </div>\n            </div>\n\n            <p-menu (mouseenter)=\"stopDelayClose();\" (mouseleave)=\"menu.hide($event);\" #menu [popup]=\"true\" [model]=\"actions\"></p-menu>\n\n            <div class=\"header-toolbar-tool\">\n                <div pTooltip=\"More&nbsp;actions\" tooltipPosition=\"bottom\" (mouseleave)=\"startDelayClose(menu);\" (click)=\"showMenu(menu, $event)\" class=\"p-as-center ui-border header-toolbar-tool-button\">\n                    <span class=\"pi pi-ellipsis-v\"></span>\n                </div> \n            </div>\n\n            <div class=\"header-toolbar-tool\">\n                <div pTooltip=\"Close\" tooltipPosition=\"bottom\" (click)=\"click('close')\" class=\"p-as-center ui-border header-toolbar-tool-button\" >\n                    <span class=\"pi pi-times\"></span>\n                </div>\n            </div>\n        </span>\n\n    </div>\n\n    <div class=\"pdf\"> \n\n        <div class=\"pdf-control\">\n\n            <div class=\"pdf-control-toolbar p-d-flex\">\n                <div class=\"p-as-center ui-border pdf-control-toolbar-label\">\n                    <span>Page</span>\n                </div>\n                <div pTooltip=\"Current page\" tooltipPosition=\"top\" class=\"p-as-center ui-border pdf-control-toolbar-label\">\n                    <span>{{page}}{{pdf ? \" / \" + pdf.numPages: \"\"}}</span>\n                </div>\n            </div>\n\n            <div class=\"pdf-control-toolbar p-d-flex\">\n                <div pTooltip=\"Rotate left\" tooltipPosition=\"top\" (click)=\"click('rotateLeft')\" class=\"p-as-center ui-border pdf-control-toolbar-button\">\n                    <span class=\"pi pi-directions-alt\"></span>\n                </div>\n                <div pTooltip=\"Zoom out\" tooltipPosition=\"top\" (click)=\"click('zoomOut')\" class=\"p-as-center ui-border pdf-control-toolbar-button\">\n                    <span class=\"pi pi-search-minus\"></span>\n                </div>\n                <div pTooltip=\"Fit to screen\" tooltipPosition=\"top\" (click)=\"click('fit2Screen')\" class=\"p-as-center ui-border pdf-control-toolbar-button\">\n                    <span class=\"pi pi-table\"></span>\n                </div>\n                <div pTooltip=\"Zoom in\" tooltipPosition=\"top\" (click)=\"click('zoomIn')\" class=\"p-as-center ui-border pdf-control-toolbar-button\">\n                    <span class=\"pi pi-search-plus\"></span>\n                </div> \n                <div pTooltip=\"Rotate right\" tooltipPosition=\"top\" (click)=\"click('rotateRight')\" class=\"p-as-center ui-border pdf-control-toolbar-button\">\n                    <span class=\"pi pi-directions\"></span>\n                </div>\n            </div>\n\n        </div>\n                  \n        <pdf-viewer\n            [src]=\"pdfSrc\"\n            (pageChange)=\"currentPreviewPage($event)\"\n            [rotation]=\"rotation\"\n            [original-size]=\"originalSize\"\n            [fit-to-page]=\"fitToPage\"\n            (after-load-complete)=\"afterLoadComplete($event)\"\n            [zoom]=\"zoom\"\n            [show-all]=\"showAll\"\n            [stick-to-page]=\"stickToPage\"\n            [render-text]=\"renderText\"\n            [external-link-target]=\"'blank'\"\n            [autoresize]=\"autoresize\"\n            (error)=\"onError($event)\"\n            (on-progress)=\"onProgress($event)\"\n            (page-rendered)=\"pageRendered($event)\"\n      ></pdf-viewer>\n\n\n    </div> \n\n</div>\n"
        },
        {
            "name": "SliderComponent",
            "id": "component-SliderComponent-be99ae2f3ad7c98153dd24bea11cf37e",
            "file": "backup/slider-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-slider",
            "styleUrls": [
                "./slider-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./slider-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "imageVisibleCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "items",
                    "type": "QueryList<ElementRef<HTMLDivElement>>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SliderItemDirective, {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "itemWidth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "shownImageCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "sliderWidth",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "slidesContainer",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'slides'"
                        }
                    ]
                },
                {
                    "name": "slidesIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "onClickLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "onClickRight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "setSliderWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, AfterContentInit, ContentChildren, ViewChild, QueryList, ElementRef } from '@angular/core';\r\nimport { SliderItemDirective } from './slider-item-directive';\r\n\r\n@Component({\r\n  selector: 'app-slider',\r\n  templateUrl: './slider-component.html',\r\n  styleUrls: ['./slider-component.scss']\r\n})\r\nexport class SliderComponent implements AfterContentInit {\r\n\r\n  @ContentChildren(SliderItemDirective, { read: ElementRef }) items\r\n    : QueryList<ElementRef<HTMLDivElement>>;\r\n\r\n  @ViewChild('slides') slidesContainer: ElementRef<HTMLDivElement>;\r\n\r\n  public slidesIndex = 0;\r\n  itemWidth = 0;\r\n  sliderWidth:string = \"\";\r\n\r\n  shownImageCount:number = 0;\r\n  imageVisibleCount:number = 0;\r\n\r\n  get currentItem(): ElementRef<HTMLDivElement> {\r\n    return this.items.find((item, index) => index === this.slidesIndex);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    console.log('items', this.items);\r\n    //find the item width\r\n    this.itemWidth = this.items.first.nativeElement.offsetWidth;\r\n    this.setSliderWidth();\r\n\r\n    window.addEventListener('resize', ()=> {\r\n      this.setSliderWidth();\r\n    });\r\n\r\n  }\r\n\r\n  setSliderWidth() {\r\n    let maxViewable:number = Math.floor( window.innerWidth * 0.8  / this.itemWidth );\r\n    let newImageVisibleCount:number = this.items.length > maxViewable ? maxViewable : this.items.length;\r\n\r\n    if (newImageVisibleCount !== this.imageVisibleCount) {\r\n      this.imageVisibleCount = newImageVisibleCount;\r\n      this.sliderWidth = (this.imageVisibleCount * this.itemWidth).toString() + \"px\";\r\n    }\r\n\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    console.log('slides', this.slidesContainer);\r\n\r\n  }\r\n\r\n  onClickLeft() {\r\n    this.slidesContainer.nativeElement.scrollLeft -= this.currentItem.nativeElement.offsetWidth;\r\n    \r\n    if (this.slidesIndex > 0) {\r\n      this.slidesIndex--;\r\n    } \r\n  }\r\n\r\n  onClickRight() {\r\n    this.slidesContainer.nativeElement.scrollLeft += this.currentItem.nativeElement.offsetWidth;\r\n\r\n    if (this.slidesIndex < this.items.length - 1) {\r\n      this.slidesIndex++\r\n    }\r\n  }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".slider-container {\r\n    position: absolute;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    right: 0px;\r\n\r\n    display: flex;\r\n    //flex-direction: column;\r\n    margin-bottom: 16px;\r\n  }\r\n  \r\n  .slides {\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    display: flex;\r\n    overflow-x: hidden;\r\n    // This is not supported by all browsers. If you want a different animation, please feel free\r\n    // to find your own solution.\r\n    scroll-behavior: smooth;\r\n  \r\n    &::-webkit-scrollbar {\r\n        width: 0px;\r\n        background: transparent;\r\n    }\r\n  \r\n  }\r\n  \r\n  .controls {\r\n    display: flex;\r\n    justify-content: center;\r\n  }",
                    "styleUrl": "./slider-component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ],
            "accessors": {
                "currentItem": {
                    "name": "currentItem",
                    "getSignature": {
                        "name": "currentItem",
                        "type": "",
                        "returnType": "ElementRef<HTMLDivElement>",
                        "line": 23
                    }
                }
            },
            "templateData": "<div class=\"slider-container\">\r\n    <div class=\"slides\" #slides [ngStyle]=\"{ 'width': sliderWidth }\">\r\n      <ng-content select=\"[appSliderItem]\" #sliderItem></ng-content>\r\n    </div>\r\n    <div class=\"controls\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"onClickLeft()\">left</button>\r\n      <button mat-raised-button color=\"primary\" (click)=\"onClickRight()\">right</button>\r\n    </div>\r\n  </div>"
        },
        {
            "name": "TelephonyTaskComponent",
            "id": "component-TelephonyTaskComponent-77dd26b503de981309260758d19a0ebd",
            "file": "src/stories/telephony-task-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-telephony-task",
            "styleUrls": [
                "./telephony-task-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./telephony-task-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "direction",
                    "defaultValue": "'inbound'",
                    "line": 43,
                    "type": "\"inbound\" | \"outbound\""
                },
                {
                    "name": "duration",
                    "defaultValue": "\"00:00:00\"",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "info",
                    "defaultValue": "\"\"",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "muted",
                    "defaultValue": "false",
                    "line": 41,
                    "type": "boolean"
                },
                {
                    "name": "onHold",
                    "defaultValue": "false",
                    "line": 38,
                    "type": "boolean"
                },
                {
                    "name": "otherParty",
                    "defaultValue": "\"01483000007\"",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "priority",
                    "defaultValue": "\"P1\"",
                    "description": "<p>control inputs</p>\n",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "priorityColour",
                    "defaultValue": "\"#E02020\"",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "state",
                    "defaultValue": "'none'",
                    "line": 35,
                    "type": "\"none\" | \"dialling\" | \"ringing\" | \"connected\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "busy",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "holdTooltip",
                    "defaultValue": "\"Hold\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "items",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "menuAutoHideTimer",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "mouseHover",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "muteTooltip",
                    "defaultValue": "\"Mute\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "statusMsg",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "itemInArray",
                    "args": [
                        {
                            "name": "arr",
                            "type": ""
                        },
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 188,
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mouseOut",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149
                },
                {
                    "name": "showMenu",
                    "args": [
                        {
                            "name": "menu",
                            "type": ""
                        },
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startDelayClose",
                    "args": [
                        {
                            "name": "menu",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopDelayClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172
                },
                {
                    "name": "updateStatus",
                    "args": [
                        {
                            "name": "direction",
                            "type": ""
                        },
                        {
                            "name": "state",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "direction",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, OnChanges, EventEmitter, SimpleChanges  } from '@angular/core';\r\nimport { ButtonModule } from 'primeng/button/';\r\nimport { CardModule } from 'primeng/card';\r\nimport { MenuItem } from 'primeng/api';\r\n\r\n@Component({\r\n    selector: 'app-telephony-task',\r\n    templateUrl: './telephony-task-component.html',\r\n    styleUrls: ['./telephony-task-component.scss']\r\n  })\r\n\r\nexport class TelephonyTaskComponent implements OnInit {\r\n    /**\r\n     * control inputs\r\n     */\r\n    @Input()\r\n    priority?: string = \"P1\";\r\n\r\n    @Input() \r\n    priorityColour:string = \"#E02020\";\r\n\r\n    @Input()\r\n    otherParty?: string = \"01483000007\";\r\n\r\n    @Input()\r\n    active?: boolean = false;\r\n\r\n    @Input()\r\n    info?: string = \"\";\r\n\r\n    @Input()\r\n    duration?: string = \"00:00:00\";\r\n\r\n    @Input()\r\n    state : 'none' | 'dialling' | 'ringing' | 'connected' = 'none';\r\n\r\n    @Input()\r\n    onHold? : boolean = false;\r\n\r\n    @Input()\r\n    muted? : boolean = false;\r\n\r\n    @Input() direction: 'inbound' | 'outbound' = 'inbound';\r\n\r\n    @Output()\r\n    onClick = new EventEmitter<any>();\r\n\r\n    muteTooltip: string = \"Mute\";\r\n    holdTooltip: string = \"Hold\";\r\n    statusMsg: string = \"\";\r\n\r\n    mouseHover:boolean = false;\r\n    busy:boolean = true;\r\n    menuAutoHideTimer:any = null;\r\n\r\n    items: MenuItem[];\r\n\r\n    constructor() {\r\n      //pop-up menu items\r\n      this.items = [\r\n          {\r\n            id: 'toolInfo', \r\n            label: 'Call Info', \r\n            icon: 'icon-info', \r\n            disabled : true,\r\n            command: (event) => {\r\n              this.onClick.emit({ 'id': event.item.id})\r\n            }\r\n          },\r\n          {\r\n            id: 'toolDropcall', \r\n            label: 'Hang up', \r\n            icon: 'icon-hangup', \r\n            disabled : true,\r\n            command: (event) => {\r\n              this.onClick.emit({ 'id': event.item.id})\r\n            }\r\n          }, \r\n      ];\r\n    }\r\n\r\n    updateStatus(direction, state) {\r\n      //only applicable for outbound\r\n      switch (direction) {\r\n        case \"inbound\":\r\n          this.statusMsg = \"\";\r\n        break;\r\n\r\n        case \"outbound\":\r\n          switch (state) {\r\n            case \"dialling\":\r\n              this.statusMsg = \"Dialling...\";              \r\n              break;\r\n\r\n            case \"ringing\":\r\n              this.statusMsg = \"Ringing...\";                \r\n              break;\r\n\r\n            case \"connected\":\r\n              this.statusMsg = \"\";\r\n              break;\r\n\r\n            default:\r\n              this.statusMsg = \"\";\r\n              break;\r\n          }          \r\n          break;\r\n      }\r\n    }\r\n\r\n    ngOnChanges (changes: SimpleChanges) {\r\n      for (const propName in changes) {\r\n        switch (propName) {\r\n\r\n          case \"direction\":\r\n            this.updateStatus(changes[propName].currentValue, this.state);\r\n            break;\r\n\r\n          case \"state\":\r\n            this.updateStatus(this.direction, changes[propName].currentValue);\r\n            break;\r\n\r\n          case \"onHold\":\r\n            this.mouseHover = this.muted || changes[propName].currentValue;  \r\n            this.holdTooltip = this.onHold ? \"Resume\" : \"Hold\";\r\n            break;\r\n\r\n          case \"muted\":            \r\n            this.mouseHover = this.onHold || changes[propName].currentValue;\r\n            //refresh tooltips\r\n            this.muteTooltip = changes[propName].currentValue ? \"Unmute\" : \"Mute\";\r\n            break;\r\n\r\n          case \"toolbar\":\r\n            for (const itemId in changes[propName].currentValue) {\r\n              for (let index=0; index < this.items.length; index++) {\r\n                if (this.items[index].id===itemId) {\r\n                  this.items[index].disabled = changes[propName].currentValue[itemId].disabled;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            break;\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    //\r\n    // function   : show telephony quick menu\r\n    //\r\n    // parameters : menu  - reference to pop quick menu\r\n    //              event - DOM event\r\n    //\r\n    // returns    : none.\r\n    //\r\n    showMenu(menu, event) {\r\n      menu.show(event);\r\n    }\r\n\r\n    startDelayClose(menu) {\r\n      this.menuAutoHideTimer = setTimeout(()=> {\r\n        menu.hide();  \r\n        this.menuAutoHideTimer = null;\r\n      },100);\r\n    }\r\n  \r\n    stopDelayClose() {\r\n      //stop delay close timer if active\r\n      if (this.menuAutoHideTimer) {\r\n        clearTimeout(this.menuAutoHideTimer);\r\n        this.menuAutoHideTimer = null;      \r\n      }\r\n    }\r\n\r\n    //\r\n    // function   : is string contained in array\r\n    //\r\n    // parameters : arr  - arr to search\r\n    //              item - string item to search for\r\n    //\r\n    // returns    : none.\r\n    //\r\n    itemInArray(arr, item) {\r\n      var i;\r\n      for (i=0; i < arr.length; i++) {\r\n        if (item===arr[i]) {\r\n          return (true);\r\n        }\r\n      }\r\n      return (false);\r\n    }\r\n\r\n    //\r\n    // function   : mouse out event handler. Need to distinquish between\r\n    //              the mouse moving outside the component or hovering over\r\n    //              a child component\r\n    //\r\n    // parameters : event - DOM event\r\n    //\r\n    // returns    : none.\r\n    //\r\n    mouseOut (event) {\r\n      //this is the original element the event handler was assigned to\r\n      var ignore = false, e = event.toElement || event.relatedTarget;\r\n\r\n      //toolbar must remain visible if the call is held\r\n      if (this.onHold || this.muted) {\r\n        return;\r\n      }\r\n\r\n      //have we move to the task-item\r\n      if (e!=null && this.itemInArray(e.classList, \"ui-interaction-tile-content\")) {\r\n        return;\r\n      }\r\n      //traverse up the parents to determine if this is a child of the tile\r\n      //or the tile itself, only interested in tile itself for mouseout event\r\n      while (e!==null && e.parentNode.className && e.parentNode.className.indexOf(\"my-task\")===-1) {\r\n        if (this.itemInArray(e.parentNode.classList, \"ui-interaction-tile-content\")) {\r\n          ignore=true;\r\n          break;\r\n        }\r\n        e= e.parentNode;\r\n      }\r\n      if (!ignore) {\r\n        this.mouseHover=false;      \r\n      }\r\n  }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".telephony-task-info {\r\n    margin-top:6px;\r\n    height: 32px;\r\n}\r\n\r\n.telephony-task-class-name {\r\n    font-size: 12px;\r\n    color: #949CAD;\r\n    width: 207px;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;    \r\n}\r\n\r\n.telephony-task-duration {\r\n    font-size: 12px;\r\n    color:#56627C;\r\n    margin-right:16px;\r\n}\r\n\r\n.telephony-task-channel {\r\n    width: 42px;\r\n\r\n    &-icon {\r\n        font-size: 24px;\r\n        color: #217EB7;\r\n    }\r\n}\r\n\r\n.telephony-task-party {\r\n    font-size: 14px;\r\n    color: #56627C;\r\n    font-weight: 600;\r\n    display: block;\r\n    width: 166px;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;      \r\n}\r\n\r\n.telephony-task-flag {\r\n    text-align:right; \r\n    width:33px;\r\n    height: 26px;\r\n    padding-top: 4px;       \r\n\r\n    &-text {\r\n        width: 21px;\r\n        height: 17px;\r\n        border-radius: 2px;\r\n        font-size: 10px;\r\n        line-height: 17px; \r\n        color: #FFFFFF;  \r\n        text-align: center;\r\n        float: right;\r\n    }\r\n}\r\n\r\n.telephony-task-status {\r\n    font-size: 12px;\r\n    line-height: 16px;\r\n    color: #56627C;\r\n}\r\n\r\n.telephony-task-button-round {\r\n    cursor:pointer;\r\n    height: 24px;\r\n    width: 24px; \r\n    line-height: 24px; \r\n    border-radius: 12px;\r\n}\r\n\r\n.telephony-task-button-success {\r\n    background-color: #3EC154; \r\n    color: #ffffff;\r\n}\r\n\r\n.telephony-task-status-ringing {\r\n    color: #3EC154; \r\n}\r\n\r\n.telephony-task-onhold {\r\n    background: #E4AD00 !important;\r\n    color: #FFFFFF !important;\r\n}\r\n\r\n.telephony-task-muted {\r\n    background: #456FAA !important;\r\n    color: #FFFFFF !important;    \r\n}\r\n\r\n.telephony-task-toolbar {\r\n    padding-left: 40px;\r\n\r\n    &-button {\r\n        background: #FFFFFF;\r\n        color: #949CAD;    \r\n        border: 1px solid #DBDBDB;\r\n        width:38px; \r\n        height: 26px;\r\n        text-align: center;  \r\n        cursor: pointer;  \r\n\r\n        &:first-child {\r\n            border-top-left-radius: 2px;\r\n            border-bottom-left-radius: 2px;            \r\n          }\r\n    \r\n        &:last-child {\r\n            border-top-right-radius: 2px;\r\n            border-bottom-right-radius: 2px;            \r\n        }\r\n\r\n        &:hover {\r\n            border-color: #949CAD;\r\n        }\r\n\r\n        >span {\r\n            line-height:24px; \r\n            font-size:12px;\r\n        }\r\n    }\r\n}\r\n\r\n.ui-border1 {\r\n    border:1px solid red; \r\n}\r\n\r\n\r\n",
                    "styleUrl": "./telephony-task-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 56
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"my-task my-task-telephony\" [ngClass]=\"{ 'my-task-active' : active }\">\r\n    <div class=\"telephony-task-content\" (mouseover)=\"mouseHover=busy\" (mouseout)=\"mouseOut($event);\">\r\n\r\n        <div class=\"p-d-flex p-jc-between\">\r\n            <div class=\"p-d-flex\">\r\n                <div class=\"p-as-center ui-border telephony-task-channel\">\r\n                    <span class=\"telephony-task-channel-icon\"><div [ngClass]=\"{ 'icon-Incoming' : direction==='inbound', 'icon-Outgoing' : direction!=='inbound' }\"></div></span>\r\n                </div>\r\n                <div class=\"p-as-center ui-border\">\r\n                    <span class=\"telephony-task-party\">{{otherParty}}</span> \r\n                </div>\r\n            </div>\r\n            <div class=\"p-d-flex\">\r\n                <div class=\"p-as-center ui-border\" style=\"text-align: right;\">\r\n                    <span [ngClass]=\"{ 'telephony-task-status-ringing' : (state==='ringing' && direction==='outbound') }\" class=\"telephony-task-status\"><i [hidden]=\"!(state==='ringing' && direction==='outbound')\" class=\"icon-Ringing\"></i> {{statusMsg}}</span>\r\n                </div>\r\n\r\n                <div [hidden]=\"!(direction==='inbound' && state==='ringing')\" class=\"p-as-center ui-border\" style=\"text-align: center;\" >\r\n                    <div (click)=\"onClick.emit({ 'id': 'toolAnswer'})\" class=\"telephony-task-button-round telephony-task-button-success icon-Tick\"></div>                    \r\n                </div>\r\n                <div class=\"p-as-center ui-border telephony-task-flag\">\r\n                    <div [hidden]=\"priority===''\" class=\"telephony-task-flag-text\" [ngStyle]=\"{'background-color' : priorityColour }\">{{priority}}</div>\r\n                </div> \r\n            </div>\r\n    \r\n        </div>  \r\n\r\n        <div class=\"p-d-flex p-jc-between telephony-task-info ui-border\">\r\n            \r\n            <div class=\"p-d-flex\">\r\n                <div class=\"p-as-center ui-border\">\r\n                    <span class=\"telephony-task-class-name\" [ngStyle]=\"{'display' : mouseHover ? 'none' : 'block'}\">\r\n                        <span title=\"{{info}}\">{{info}}</span>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-as-center ui-border\">\r\n                        <div [hidden]=\"!mouseHover\"> \r\n                            <div class=\"telephony-task-toolbar p-d-flex\">\r\n                                <div pTooltip=\"{{muteTooltip}}\" tooltipPosition=\"top\" (click)=\"onClick.emit({ 'id': 'toolMuted'})\" class=\"p-as-center ui-border telephony-task-toolbar-button\" [ngClass]=\"{'telephony-task-muted' : muted }\" >\r\n                                    <span [ngClass]=\"muted ? 'icon-Social-mentions' : 'icon-Mute'\"></span>\r\n                                </div>\r\n\r\n                                <p-menu (mouseleave)=\"menu.hide($event);\" (mouseenter)=\"stopDelayClose();\" #menu [popup]=\"true\" [model]=\"items\"></p-menu>\r\n\r\n                                <div pTooltip=\"{{holdTooltip}}\" tooltipPosition=\"top\" (click)=\"onClick.emit({ 'id': 'toolHold'})\" class=\"p-as-center ui-border telephony-task-toolbar-button\" [ngClass]=\"{'telephony-task-onhold' : onHold }\" >\r\n                                    <span [ngClass]=\"onHold ? 'icon-Play' : 'icon-Hold'\"></span>\r\n                                </div>\r\n                                <div (mouseenter)=\"showMenu(menu, $event)\" (mouseleave)=\"startDelayClose(menu);\" class=\"p-as-center ui-border telephony-task-toolbar-button\">\r\n                                    <span class=\"icon-More\"></span>\r\n                                </div> \r\n                            </div>\r\n                        </div>  \r\n                </div>     \r\n            </div>\r\n\r\n            <div class=\"p-d-flex\">\r\n                <div class=\"p-as-center ui-border\" style=\"text-align: right;\">\r\n                    <span class=\"telephony-task-duration\">{{duration}}</span>\r\n                </div>\r\n            </div>\r\n\r\n        </div> \r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ThumbnailComponent",
            "id": "component-ThumbnailComponent-e2e497c9a442cfef433c9a316c71b3a9",
            "file": "src/stories/thumbnail-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-thumbnail",
            "styleUrls": [
                "./thumbnail-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./thumbnail-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "images",
                    "line": 13
                },
                {
                    "name": "index",
                    "line": 15,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "click",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "indexChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "imageVisibleCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "itemWidth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "shownImageCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "sliderWidth",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "slidesContainer",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'slides'"
                        }
                    ]
                },
                {
                    "name": "slidesIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getFilename",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClickLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                },
                {
                    "name": "onClickRight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "refreshViewPort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        },
                        {
                            "name": "emitEvent",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "emitEvent",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSliderWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, AfterContentInit, ViewChild, ElementRef, Input, Output, EventEmitter, SimpleChanges } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-thumbnail',\r\n  templateUrl: './thumbnail-component.html',\r\n  styleUrls: ['./thumbnail-component.scss']\r\n})\r\n\r\nexport class ThumbnailComponent implements AfterContentInit {\r\n\r\n  @ViewChild(\"slides\") slidesContainer: ElementRef;\r\n\r\n  @Input() images; \r\n\r\n  @Input() index:number;\r\n  @Output() indexChange:EventEmitter<number> = new EventEmitter();\r\n\r\n  @Output() click:EventEmitter<string> = new EventEmitter();\r\n\r\n  public slidesIndex = 0;\r\n  itemWidth = 0;\r\n  sliderWidth:string = \"\";\r\n\r\n  shownImageCount:number = 0;\r\n  imageVisibleCount:number = 0;\r\n\r\n\r\n  ngAfterContentInit() {\r\n    //find the item width\r\n    this.itemWidth = 112;\r\n    this.setSliderWidth();\r\n\r\n    window.addEventListener('resize', ()=> {\r\n      this.setSliderWidth();\r\n    });\r\n\r\n  }\r\n\r\n  setSliderWidth() {\r\n    let maxViewable:number = Math.floor( window.innerWidth * 0.8  / this.itemWidth );\r\n    let newImageVisibleCount:number = this.images.length > maxViewable ? maxViewable : this.images.length;\r\n\r\n    if (newImageVisibleCount !== this.imageVisibleCount) {\r\n      this.imageVisibleCount = newImageVisibleCount;\r\n      this.sliderWidth = (this.imageVisibleCount * this.itemWidth).toString() + \"px\";\r\n      setTimeout(()=> {\r\n        this.refreshViewPort();\r\n      },100);\r\n\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes[\"index\"]) {\r\n        this.select(changes[\"index\"].currentValue, false);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n  }\r\n\r\n  refreshViewPort() {\r\n    if (this.slidesContainer) {\r\n      this.slidesContainer.nativeElement.scrollLeft = ( this.slidesIndex - Math.floor(this.imageVisibleCount / 2) ) * this.itemWidth;\r\n    }\r\n  }\r\n  \r\n  onClickLeft() {\r\n    if (this.slidesIndex > 0) {\r\n      this.slidesIndex--;\r\n    } \r\n    this.refreshViewPort();\r\n    this.indexChange.emit(this.slidesIndex);    \r\n  }\r\n\r\n  onClickRight() {\r\n    if (this.slidesIndex < this.images.length - 1) {\r\n      this.slidesIndex++\r\n    }\r\n    this.refreshViewPort();    \r\n    this.indexChange.emit(this.slidesIndex);    \r\n  }\r\n\r\n  select(index, emitEvent:boolean = true) {\r\n    this.slidesIndex=index;\r\n    this.refreshViewPort();\r\n    if (emitEvent) {\r\n      this.indexChange.emit(this.slidesIndex);    \r\n    }\r\n  }\r\n\r\n  getFilename(path:string) {\r\n    let parts:string[] = path.split('/');\r\n    return (parts[parts.length-1]);\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".slider-container {\r\n    position: absolute;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    right: 0px;\r\n\r\n    display: flex;\r\n    //flex-direction: column;\r\n    margin-bottom: 16px;\r\n    z-index: 101;\r\n  }\r\n  \r\n  .slides {\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    display: flex;\r\n    overflow-x: hidden;\r\n    // This is not supported by all browsers. If you want a different animation, please feel free\r\n    // to find your own solution.\r\n    scroll-behavior: smooth;\r\n  \r\n    &::-webkit-scrollbar {\r\n        width: 0px;\r\n        background: transparent;\r\n    }\r\n  \r\n  }\r\n  \r\n  .control {\r\n    display: flex;\r\n    justify-content: center;\r\n \r\n    &-toolbar {\r\n      z-index: 101;\r\n\r\n      &-button {\r\n          background: #141414;\r\n          color: #ffffff;\r\n          border: 1px solid #000000;\r\n          width: 32px;\r\n          height: 32px;\r\n          text-align: center;\r\n          cursor: pointer;\r\n          line-height: 32px; \r\n\r\n          &:first-child {\r\n            border-top-left-radius: 2px;\r\n            border-bottom-left-radius: 2px;            \r\n          }\r\n    \r\n          &:last-child {\r\n            border-top-right-radius: 2px;\r\n            border-bottom-right-radius: 2px;            \r\n          }\r\n\r\n          &:not(:first-child) {\r\n            border-left-color: rgba(170,170,170, 0.4);\r\n          }\r\n\r\n          &:hover {\r\n              border-color: #949CAD;\r\n          }\r\n\r\n          >span {\r\n              line-height:24px; \r\n              font-size:12px;\r\n          }\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  //********************************\r\n//slider styles\r\n\r\n.thumbnail {\r\n\r\n  border-width: 2px;\r\n  border-color: transparent;\r\n  border-style: solid;\r\n  padding: 2px;  \r\n  margin: 2px;\r\n  cursor: pointer;\r\n  border-radius: 2px;\r\n\r\n  &-image {\r\n    width: 100px;\r\n    height: 100px;\r\n    background-size: cover; \r\n    background-repeat: no-repeat; \r\n    background-position: 50% 50%;\r\n  }\r\n\r\n  &-selected {\r\n    border-color: #ffffff;\r\n  }\r\n}",
                    "styleUrl": "./thumbnail-component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ],
            "templateData": "<div class=\"control\">\r\n  <div class=\"control-toolbar p-d-flex\">\r\n      <div pTooltip=\"Rotate left\" tooltipPosition=\"top\" (click)=\"click.emit('rotateLeft')\" class=\"p-as-center ui-border control-toolbar-button\" [ngClass]=\"{'telephony-task-muted' : muted }\" >\r\n        <span class=\"pi pi-directions-alt\"></span>\r\n      </div>\r\n      <div pTooltip=\"Zoom out\" tooltipPosition=\"top\" (click)=\"click.emit('zoomOut')\" class=\"p-as-center ui-border control-toolbar-button\" [ngClass]=\"{'telephony-task-muted' : muted }\" >\r\n          <span class=\"pi pi-search-minus\"></span>\r\n      </div>\r\n      <div pTooltip=\"Fit to screen\" tooltipPosition=\"top\" (click)=\"click.emit('fit2Screen')\" class=\"p-as-center ui-border control-toolbar-button\" [ngClass]=\"{'telephony-task-onhold' : onHold }\" >\r\n        <span class=\"pi pi-table\"></span>\r\n      </div>\r\n      <div pTooltip=\"Zoom in\" tooltipPosition=\"top\" (click)=\"click.emit('zoomIn')\" class=\"p-as-center ui-border control-toolbar-button\">\r\n        <span class=\"pi pi-search-plus\"></span>\r\n      </div> \r\n      <div pTooltip=\"Rotate right\" tooltipPosition=\"top\" (click)=\"click.emit('rotateRight')\" class=\"p-as-center ui-border control-toolbar-button\" [ngClass]=\"{'telephony-task-muted' : muted }\" >\r\n        <span class=\"pi pi-directions\"></span>\r\n      </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"slider-container\" >\r\n  <div class=\"slides\" #slides [ngStyle]=\"{ 'width': sliderWidth }\">\r\n    <div *ngFor=\"let image of images; let i = index;\">\r\n      <div (click)=\"select(i);\" pTooltip=\"{{getFilename(image)}}\" tooltipPosition=\"top\" class=\"thumbnail\" [ngClass]=\"{'thumbnail-selected': slidesIndex===i}\">\r\n          <div class=\"thumbnail-image\" [ngStyle]=\"{'background-image': 'url(' + image +')'}\"></div>\r\n      </div>            \r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n  "
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Agent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Attachment1Image",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Attachment3Images",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Attachment5Images",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AttachmentPdf",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AttachmentPdf5ImagesMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AttachmentPdfImageMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AttachmentPdfLongName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AttachmentPdfNoMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "AttachmentVideo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Auto",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "backup/image-viewer.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Chat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-task.stories.ts",
                "type": "",
                "defaultValue": "(args) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n    ],\n  },\n  component: ChatTaskComponent,\n  props: args,\n})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Customer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Images",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/image-viewer.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Images",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pdf-viewer.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Telephony",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/telephony-task.stories.ts",
                "type": "",
                "defaultValue": "(args) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n    ],\n  },\n  component: TelephonyTaskComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "backup/image-viewer.stories.ts",
                "type": "Story<ImageViewerComponent>",
                "defaultValue": "(args: ImageViewerComponent) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n      GalleriaModule\n    ],\n    declarations: [\n      SliderComponent,\n      SliderItemDirective\n    ],\n    entryComponents: [\n    ]\n  },\n  component: ImageViewerComponent, \n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/chat-message.stories.ts",
                "type": "Story<ChatMessageComponent>",
                "defaultValue": "(args: ChatMessageComponent) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule\n    ],\n    declarations: [\n      ChatMessageAttachmentImageComponent,\n      ChatMessageAttachmentMultiImageComponent,    \n      ChatMessageAttachmentPdfComponent,  \n      ChatMessageAttachmentVideoComponent,        \n      AttachmentDirective\n    ],\n    entryComponents: [\n      ChatMessageAttachmentImageComponent,\n      ChatMessageAttachmentMultiImageComponent,\n      ChatMessageAttachmentPdfComponent,\n      ChatMessageAttachmentVideoComponent\n    ]\n  },\n  component: ChatMessageComponent, \n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/image-viewer.stories.ts",
                "type": "Story<ImageViewerComponent>",
                "defaultValue": "(args: ImageViewerComponent) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n      GalleriaModule\n    ],\n    declarations: [\n      ThumbnailComponent\n    ],\n    entryComponents: [\n    ]\n  },\n  component: ImageViewerComponent, \n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/pdf-viewer.stories.ts",
                "type": "Story<PdfDocumentComponent>",
                "defaultValue": "(args: PdfDocumentComponent) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n      PdfViewerModule\n    ],\n    declarations: [\n    ],\n    entryComponents: [\n    ]\n  },\n  component: PdfDocumentComponent, \n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/chat-message.stories.ts": [
                {
                    "name": "Agent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Attachment1Image",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Attachment3Images",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Attachment5Images",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "AttachmentPdf",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "AttachmentPdf5ImagesMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "AttachmentPdfImageMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "AttachmentPdfLongName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "AttachmentPdfNoMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "AttachmentVideo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Auto",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Customer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-message.stories.ts",
                    "type": "Story<ChatMessageComponent>",
                    "defaultValue": "(args: ChatMessageComponent) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule\n    ],\n    declarations: [\n      ChatMessageAttachmentImageComponent,\n      ChatMessageAttachmentMultiImageComponent,    \n      ChatMessageAttachmentPdfComponent,  \n      ChatMessageAttachmentVideoComponent,        \n      AttachmentDirective\n    ],\n    entryComponents: [\n      ChatMessageAttachmentImageComponent,\n      ChatMessageAttachmentMultiImageComponent,\n      ChatMessageAttachmentPdfComponent,\n      ChatMessageAttachmentVideoComponent\n    ]\n  },\n  component: ChatMessageComponent, \n  props: args,\n})"
                }
            ],
            "backup/image-viewer.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "backup/image-viewer.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "backup/image-viewer.stories.ts",
                    "type": "Story<ImageViewerComponent>",
                    "defaultValue": "(args: ImageViewerComponent) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n      GalleriaModule\n    ],\n    declarations: [\n      SliderComponent,\n      SliderItemDirective\n    ],\n    entryComponents: [\n    ]\n  },\n  component: ImageViewerComponent, \n  props: args,\n})"
                }
            ],
            "src/stories/chat-task.stories.ts": [
                {
                    "name": "Chat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/chat-task.stories.ts",
                    "type": "",
                    "defaultValue": "(args) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n    ],\n  },\n  component: ChatTaskComponent,\n  props: args,\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/image-viewer.stories.ts": [
                {
                    "name": "Images",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/image-viewer.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/image-viewer.stories.ts",
                    "type": "Story<ImageViewerComponent>",
                    "defaultValue": "(args: ImageViewerComponent) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n      GalleriaModule\n    ],\n    declarations: [\n      ThumbnailComponent\n    ],\n    entryComponents: [\n    ]\n  },\n  component: ImageViewerComponent, \n  props: args,\n})"
                }
            ],
            "src/stories/pdf-viewer.stories.ts": [
                {
                    "name": "Images",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pdf-viewer.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/pdf-viewer.stories.ts",
                    "type": "Story<PdfDocumentComponent>",
                    "defaultValue": "(args: PdfDocumentComponent) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n      PdfViewerModule\n    ],\n    declarations: [\n    ],\n    entryComponents: [\n    ]\n  },\n  component: PdfDocumentComponent, \n  props: args,\n})"
                }
            ],
            "src/stories/telephony-task.stories.ts": [
                {
                    "name": "Telephony",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/telephony-task.stories.ts",
                    "type": "",
                    "defaultValue": "(args) => ({\n  moduleMetadata: {\n    imports: [\n      ButtonModule,\n      CardModule,\n      MenuModule,\n      ToggleButtonModule,\n      MenubarModule,\n      TooltipModule,\n      BrowserAnimationsModule,\n    ],\n  },\n  component: TelephonyTaskComponent,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "backup/image-viewer-component - Copy.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/91",
                "status": "low"
            },
            {
                "filePath": "backup/image-viewer-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/50",
                "status": "low"
            },
            {
                "filePath": "backup/image-viewer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "backup/image-viewer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "backup/slider-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SliderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "backup/slider-item-directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SliderItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message-attachment-directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AttachmentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message-attachment-image-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatMessageAttachmentImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message-attachment-multi-image-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatMessageAttachmentMultiImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message-attachment-pdf-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatMessageAttachmentPdfComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message-attachment-video-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatMessageAttachmentVideoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message-attachment.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChatMessageAttachment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatMessageComponent",
                "coveragePercent": 2,
                "coverageCount": "1/40",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Agent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Attachment1Image",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Attachment3Images",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Attachment5Images",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AttachmentPdf",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AttachmentPdf5ImagesMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AttachmentPdfImageMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AttachmentPdfLongName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AttachmentPdfNoMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AttachmentVideo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Auto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Customer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-task-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatTaskComponent",
                "coveragePercent": 4,
                "coverageCount": "1/23",
                "status": "low"
            },
            {
                "filePath": "src/stories/chat-task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Chat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/image-viewer-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/65",
                "status": "low"
            },
            {
                "filePath": "src/stories/image-viewer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Images",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/image-viewer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pdf-viewer-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PdfDocumentComponent",
                "coveragePercent": 15,
                "coverageCount": "8/52",
                "status": "low"
            },
            {
                "filePath": "src/stories/pdf-viewer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Images",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/pdf-viewer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/telephony-task-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TelephonyTaskComponent",
                "coveragePercent": 3,
                "coverageCount": "1/28",
                "status": "low"
            },
            {
                "filePath": "src/stories/telephony-task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Telephony",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/thumbnail-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThumbnailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}